// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// kiosk-worker/common.py
// kiosk-worker/configs.py
// kiosk-worker/controller.py
// kiosk-worker/ip_provider.py
// kiosk-worker/main.py
package worker

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kioskWorkerCommonPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xc1\x0a\x02\x21\x10\x87\xf1\xfb\x3c\xc5\xdc\x56\x0f\x79\x08\x8a\x08\x7a\x96\xc5\xf2\xbf\x2a\x94\x2e\xe3\x08\xfb\xf8\x81\xd5\x25\xf6\xfe\xfb\xbe\xfc\x5a\xab\x28\x27\xdf\xd2\x33\xdf\x89\x28\x60\xe1\x08\x9d\x5b\xf2\xc7\xd3\xd9\x28\x36\xb5\x57\x62\xe6\x61\xe6\x88\x02\xf1\x5a\x85\x6f\xbf\xc8\x7d\xa9\xdd\x51\xae\xaf\xc1\x2b\xc6\xc6\xa1\x3c\x6a\x80\x99\xba\x2e\x87\xcb\x64\x3f\x5e\xa0\x5d\xca\x7f\x96\xb0\x85\x1c\xd1\xd4\x58\x7a\x07\x00\x00\xff\xff\x65\xbb\xed\xe6\xa3\x00\x00\x00")

func kioskWorkerCommonPyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerCommonPy,
		"kiosk-worker/common.py",
	)
}

func kioskWorkerCommonPy() (*asset, error) {
	bytes, err := kioskWorkerCommonPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/common.py", size: 163, mode: os.FileMode(436), modTime: time.Unix(1624188214, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskWorkerConfigsPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xdf\x6f\xdb\x38\x0c\x7e\xf7\x5f\x41\xe8\x49\x46\x03\x37\x2b\xb0\x61\x08\xe0\x87\xa0\xf5\x7a\xc6\xba\xa4\x48\x82\xbb\x87\xc3\x41\xd0\x6c\xda\xd1\x6a\x5b\x3e\x51\x49\x0b\x0c\xfb\xdf\x0f\xb2\xe5\xb8\xf9\xd1\xde\xe1\xfc\x64\x8a\xe4\x47\x8a\xfc\x3e\xa9\xba\xd5\xc6\x82\x91\x4d\xae\xeb\xc0\x5b\x64\x8d\x6a\xca\xc1\xfa\x41\xba\x19\xfe\x33\x5d\xd7\xa3\x65\xf0\xef\x1d\x92\xa5\xc1\xd6\x14\xb5\xd2\x6e\x07\xb3\xd2\x65\xe9\x70\x06\x5b\xb5\xa2\x35\x7a\xaf\x72\x34\x41\xb0\x4e\x56\xbf\x27\x2b\x31\xbf\xbb\x5b\x25\xeb\x35\xc4\xc0\xb6\xd6\xb6\xb3\xeb\xeb\x9f\xbf\x66\x9f\xa7\x9f\xa7\x2c\x2a\xb4\xa9\xa5\xe5\x9a\xa2\x12\x2d\x36\x7b\xce\xbe\xa6\xcb\xf5\x57\xd1\x67\xb2\x09\xb0\x4a\x67\xb2\xda\x6a\xb2\x2c\x0c\x83\xde\x99\x7e\x9b\xdf\x27\x22\xbd\x83\x18\xce\x12\x07\x1f\x0b\x83\xdb\xe5\x62\x91\xdc\x6e\x96\xab\x0e\x2d\xbd\x4d\x5e\x37\x72\xfd\xa4\x34\x3d\xd1\xad\x6e\x1a\xcc\xac\x36\xcc\x85\x7f\x49\xef\xc5\x97\xf4\x21\x11\x8b\xf9\xb7\xc4\x45\x75\x41\x22\xd3\x4d\xa1\xca\xc8\xcd\x88\x05\x03\xd6\xe3\x7c\xbd\xfe\x63\xb9\xba\x13\x0f\xc9\xe2\x7e\xf3\x1b\xc4\xf0\xe1\x93\xc3\xd8\xac\x96\x0f\x0f\xc9\x58\xf3\x71\xb9\xda\x38\xa8\x8f\xd3\xe9\x94\x05\x41\x90\x63\x01\x25\x5a\x0f\x2a\xf6\xd2\x28\xf9\xbd\x42\x12\x85\xd1\xb5\x70\x35\x78\xef\xa2\x70\x16\x00\x00\xa8\x02\xfc\x01\x28\x82\x85\x6e\xb0\x3f\x77\x1f\xbe\x28\xcb\x6f\x6e\x3e\x84\xdd\x89\x41\xbb\x33\xcd\x10\xfd\x27\x53\x39\xfb\x6b\x32\x9a\xad\x24\x7a\xd6\xe6\xf8\x90\xd0\xec\x55\x86\x8f\x07\x9f\x6f\x31\x93\x55\x25\x32\x83\xd2\xa2\xa8\xd1\x6e\x75\xce\x7d\x3f\xad\x26\x52\xdf\x2b\x14\xd9\x56\x1a\x82\xd8\x33\x29\x92\x94\x29\x25\x2a\xb4\x16\x0d\xc1\xd5\x70\x9c\xab\x52\x59\xea\x33\x7d\x11\xd1\x56\x52\x35\x16\x5f\xac\x1b\x0c\x8b\x7e\x68\xd5\xf0\x9e\x9d\x51\xb6\xd5\x2a\x43\xe2\xc7\x55\x26\xf0\x14\xbf\x31\xf8\x70\xb8\x3b\xb5\xba\x21\x84\xf8\xc0\xd8\xa8\xdd\x59\x7e\x42\xc1\x2b\x78\x93\x15\x93\xc3\x54\x2f\x7d\x6e\x31\xf1\xcf\x9e\x10\x69\x2d\x4b\x4c\x73\x36\x03\xd5\x58\x7e\xcc\xbb\xf0\x7d\x98\xfe\xeb\x61\xe6\x79\x6e\x90\xc8\xc1\x8c\xa2\x71\x74\x16\xaa\xe5\x21\x5c\x01\x9b\xb1\xbe\xe1\x4b\x9c\xfa\x4f\x75\x4e\xb7\x3b\xbb\xb0\x83\x5f\xfd\x00\xeb\x1d\x59\x41\x72\x8f\x9e\x99\x10\x77\x5c\x1b\x28\x38\xcc\x37\x22\x2b\xed\x8e\x44\xa6\x73\x84\x38\x86\x9b\xe9\x74\xa4\x63\xe1\x14\xd9\x62\xc3\x4f\xb5\x34\x01\xf6\xcc\xc2\x43\xdc\x85\x5a\x07\xfc\x4e\x01\x63\xa8\x7f\x5f\x22\xd5\x14\x9a\xb3\x7b\x6d\x3d\x75\xc1\xc9\x05\xdc\xfd\xd0\xcc\x80\xf5\x7c\xe3\xa7\xc0\xe1\xdb\x35\x2f\x50\x1f\x62\xff\xf6\x75\x4b\xa0\xad\xbc\xf9\xf8\x89\x9f\x0f\x6c\xc4\xf4\x1a\x76\x2d\x43\xdc\x51\x24\xca\x77\x75\x4b\xe7\x7d\x8c\x23\x8a\x9e\x8d\xb2\xc8\x5f\xa5\xbe\x76\x66\x95\x26\xe4\x47\x72\xfe\x97\xc7\xe2\xbc\x94\x17\x70\x9f\x52\xa8\x0a\x05\xbe\x28\xb2\x34\x08\xd8\xe3\xfa\x87\x3c\x52\xe4\x62\xce\x56\x36\xe0\x54\x5a\xe6\x1e\xda\x97\xed\xc2\x3d\xd6\x7b\x1b\x37\x7e\xe3\xae\x4d\x91\x4b\x2b\x21\x86\x22\x32\x28\x73\x7f\xc1\xff\x73\xdd\x6e\xc8\xae\x27\xe2\x07\xdc\x30\x0c\xfe\x09\x00\x00\xff\xff\xa2\x4e\xf3\x61\xe3\x06\x00\x00")

func kioskWorkerConfigsPyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerConfigsPy,
		"kiosk-worker/configs.py",
	)
}

func kioskWorkerConfigsPy() (*asset, error) {
	bytes, err := kioskWorkerConfigsPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/configs.py", size: 1763, mode: os.FileMode(436), modTime: time.Unix(1624192950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskWorkerControllerPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x5f\x6f\x9b\x30\x14\xc5\xdf\xfd\x29\xae\xd0\xd4\x80\xb4\x58\xda\x6b\x25\x1e\xa2\x96\x68\x91\x32\x8a\x06\x7b\xd8\x13\xa2\x70\xa1\xd6\x8c\x2f\xb2\xcd\x96\xae\xea\x77\x9f\x02\x76\x61\x9a\xd4\x2e\x7d\x4a\x7c\xee\x9f\xf3\xf3\x31\xa2\x1f\x48\x5b\x90\xd4\x75\x42\x75\xcc\x1d\xc9\xf8\x7f\x66\xbc\x1f\x34\xd5\x68\x0c\xf3\x52\x2b\x2b\xf3\x83\xb1\xe3\xae\x48\xf2\xa2\xcc\x6f\xbe\x26\x49\x9a\x7f\xbe\x2b\xca\xfd\xe1\x98\x94\xe9\xee\x4b\x02\x31\x04\xa6\xd6\x88\xca\x3c\x90\xe5\x83\xea\x02\xc6\x58\x83\x2d\x74\x68\xcb\xa5\x12\x46\xd7\x0c\x00\x80\x0c\x37\x8f\xc6\x62\x1f\x06\x78\x9a\x3c\x6e\x0f\x79\x76\xdc\x7d\x8f\xaf\x3f\xc1\xd5\x15\x98\x5a\x93\x85\xed\x6f\xd8\x12\x3c\x3d\xc3\x16\x61\xd3\xff\x84\x0f\x2d\xf0\x4d\xc0\x5b\xd2\x7d\x65\xc3\x57\x70\xa2\x68\x72\xd1\x68\x47\xad\x66\x7c\x6e\x50\x35\x65\x2b\x24\xbe\x3a\xe8\xa8\xf1\x84\xf5\x68\xb1\xac\xa9\xef\x2b\xd5\x84\xee\xd7\xd1\xbb\x7c\x20\x86\x94\x14\x4e\x92\xd5\x8f\x73\xed\xef\xfa\x12\x26\xcf\x68\x40\xe5\x17\x71\x33\x48\x61\xc3\xe8\x23\x18\xdb\xd0\x68\xe3\x75\xe3\x21\x4b\x26\x1d\xb5\x5e\xeb\x79\x71\x7b\xf7\xad\x88\x5e\x5c\xe6\x49\xdf\x09\xb1\xb7\xe5\x67\x8f\x51\x89\xba\xb2\x18\x2e\xed\x2e\x8c\x79\x6a\x52\xf1\x54\xe3\xb0\x7e\x70\x7e\x53\x49\x89\x4d\x36\x9f\x12\xad\x49\x2f\x97\x72\x1f\x0c\xc7\xb3\x1c\x06\x53\x15\x84\x02\x77\x23\x17\x99\x20\x05\x9b\xa7\xe7\xe5\x95\x7c\x72\xff\x80\x78\xcf\x19\x9f\x6b\xac\x1a\x47\xeb\xb8\xf6\x42\x62\x4a\x76\x4f\xa3\x6a\xde\x60\x99\xac\xab\x7b\x89\xa0\xc8\x42\x7b\x9e\x80\x96\xf4\x0b\xdb\xff\x11\xbd\x73\xcf\x8a\xf9\x8d\xb4\x7e\x3d\x08\x89\x3e\x28\xd5\x5d\x8c\x77\xf9\x12\xf6\x27\x00\x00\xff\xff\xa1\xa3\xe1\xb3\xee\x03\x00\x00")

func kioskWorkerControllerPyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerControllerPy,
		"kiosk-worker/controller.py",
	)
}

func kioskWorkerControllerPy() (*asset, error) {
	bytes, err := kioskWorkerControllerPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/controller.py", size: 1006, mode: os.FileMode(436), modTime: time.Unix(1624192603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskWorkerIp_providerPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\x5d\x6b\xdb\x30\x14\x7d\xd7\xaf\xb8\xb8\x0f\xb5\xa1\xc8\xfd\xd8\xc3\x28\xf8\xc1\x4b\xbc\xce\x34\x4d\x42\x93\x16\xc6\x18\x42\x53\xae\x13\x11\x5b\xd7\x93\x6e\xda\xb5\xbf\x7e\x38\x8e\xd7\x6c\x6c\x43\x0f\xe2\x7e\x9c\xc3\xb9\xe7\xd8\xa6\x25\xcf\x10\xc8\x6c\x91\xc5\xa1\xf2\xf8\x7d\x87\x81\xc3\x50\x53\x10\x62\x32\x1b\xe5\x13\x55\xce\x55\x31\x7d\x54\xb7\xc5\x67\xc8\x20\xea\x7b\x77\xf9\xe8\x53\x39\x2d\x22\x91\x8f\xc7\xf7\xc5\x62\xa1\x96\x33\x75\x53\x2c\xd5\xfc\xe1\xc3\xa4\x1c\xa9\x72\xde\xad\x6e\x98\xdb\x70\x9d\xa6\xba\xb5\xd2\xb6\xb6\x7a\x91\xe4\xd7\x69\xf4\x46\x3b\x80\x1f\xf3\xc9\x43\x01\x19\x4c\xc9\xa1\x10\xe2\x04\x98\x56\x04\xaf\xfa\x55\x83\x23\x46\xd9\x75\x36\x36\x80\xa1\x15\x02\xb9\xfa\x05\x2a\xf2\xc0\x18\xd8\xba\x35\x90\x83\x46\x9b\x8d\x75\x18\xe0\xd9\xf2\x06\x1c\x39\x68\x77\xdf\x6a\x6b\xc0\xb6\xe2\xa4\x87\xd9\x00\xac\xb7\xe8\xa0\xf2\xd4\xc0\x20\x2d\xb0\x36\x5b\x7a\x42\x5f\xd5\xf4\x2c\x0d\x35\xa9\x4e\x2f\xaf\xde\x5f\x5e\xbe\xbb\xba\x10\x2b\xac\x60\x8d\xac\x6a\x32\xba\x56\xb6\x8d\x93\x6b\x01\x00\x10\x20\x3b\x98\x27\xfb\x2f\x3e\x54\xf9\x47\x55\x4e\x8b\xe5\xd9\x30\x5d\xcc\x46\xb7\x6a\x7c\x73\x9f\xdf\x25\x3d\x50\x1a\x72\x0e\x0d\xc7\xf1\xe9\x85\xdc\xbf\xd3\x33\x38\x4f\xfa\xa9\x47\xde\x79\x07\x41\xae\x91\x3b\x02\xa7\x1b\x8c\x93\x2f\xe7\x5f\x85\xf8\x25\xa5\x3f\xeb\x48\xcb\x01\x34\xa4\xd7\x61\xe3\x7f\x65\x92\x48\xc6\x1f\x7c\xc4\xf6\x46\x63\x2b\xa0\x3d\x18\xdd\x53\xfc\x67\xec\x49\x67\x9e\x23\xde\xe7\x03\xda\xad\xfe\xbb\x9b\x65\x10\xb1\xdf\x61\xd4\x33\x1f\x89\xfc\xdd\xcb\xfd\x14\xeb\x80\x7f\xdd\x3b\x3a\x54\xfc\x0c\x00\x00\xff\xff\xfa\x02\x4d\x99\xb0\x02\x00\x00")

func kioskWorkerIp_providerPyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerIp_providerPy,
		"kiosk-worker/ip_provider.py",
	)
}

func kioskWorkerIp_providerPy() (*asset, error) {
	bytes, err := kioskWorkerIp_providerPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/ip_provider.py", size: 688, mode: os.FileMode(436), modTime: time.Unix(1624193078, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskWorkerMainPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x6b\xdb\x40\x10\xbd\xef\xaf\x98\xca\x07\x4b\xe0\xc8\x6e\xfa\x41\x29\x08\x6a\x5a\x87\xf8\x92\x84\xd6\x39\x85\xb0\x6c\xb4\x23\x6b\xf1\x6a\x57\xdd\x19\xb5\x49\x7f\x7d\x91\x64\x39\x8a\x31\xa5\x50\xea\x8b\x99\xaf\x37\xef\xcd\x93\x34\x79\x35\x7f\x30\x6e\x5e\x3f\x71\xe9\xdd\x1b\x31\x81\xda\xd4\x60\x1c\xb1\xb2\x16\x02\x7e\x6f\x90\x98\x8e\xd2\x17\x56\xd1\x4e\x4c\x80\x1a\xed\x41\xd5\x7c\x28\x9c\x3d\x01\xe5\xc1\xb3\x28\x82\xaf\xa0\x68\xdb\xc0\x54\xb5\x0f\x3c\x40\x89\x7d\x98\xfb\xaa\xf2\xee\x39\x72\x85\xd9\xd2\x10\x76\x83\x62\x54\xe4\xe0\xad\xc5\x20\x84\xaa\x0d\x64\x7d\x3d\xed\x58\xc4\x52\x3a\x55\xa1\x94\x89\x10\xcb\xdb\xcd\xe5\xea\x6a\xb3\xfe\xbc\xdc\xac\xaf\xaf\xe4\xe5\x6a\xf9\x65\xf5\x15\x32\x98\x2e\x1b\x2e\xd1\xb1\xc9\x15\x1b\xef\xa6\x42\x08\x8d\x05\xe4\x25\xe6\x3b\xa9\x5e\xd4\xe2\xe4\xa3\x00\x00\x30\x05\x9c\x46\x33\x6e\x50\x92\x96\xa8\x34\x06\xea\x07\xda\x5f\x0b\x25\xfb\x2c\x64\xc7\x6d\x77\x27\xf1\xee\x0f\xc3\x01\xb9\x09\x6e\x7f\x97\x74\x8b\x2c\xa9\x54\xe7\xef\xde\xc7\x23\xd4\x04\xb2\x0c\x08\xc3\x0f\x93\xe3\x8d\x22\xfa\xe9\x83\x16\xa3\xe1\x0b\x65\x09\x85\x10\x9f\x54\x6d\xd2\xe0\x1b\xc6\x38\x9a\x53\x1e\x10\x1d\x95\x9e\xa3\xa4\xd3\xdd\x61\x1f\x92\x23\xc5\xce\xf3\x1f\x8f\x32\xda\x14\xdd\xba\xb6\xc7\x07\xf3\x0b\x75\x34\x83\xb7\x8b\xd7\xe2\x85\x8a\xc1\xb2\xf4\x78\xdb\x0c\xce\x17\x8b\x63\x8e\xf8\x88\x79\xc3\x18\xcd\xa0\x42\x2e\xbd\xa6\xec\x2e\xba\xb9\xfe\xb6\x89\xee\x7b\xca\xfb\xba\x6c\xaf\xa3\x9c\xfe\xdf\x9c\x8f\xd7\x0d\x56\x6a\xc5\x2a\xd5\x98\x7b\x8d\x71\xd4\x70\x71\xf6\x21\x4a\x0e\x82\x4c\x01\xc3\xb3\xd8\xda\x34\x95\xb2\x52\xc6\x49\x39\xed\x89\x6c\xad\x7f\x50\x16\x76\xc6\xd3\x6e\xad\x67\x9d\x8d\x18\x06\x17\x67\x27\x6d\x1d\xf4\xf5\x6f\x47\xda\xff\xcb\xc2\x58\x94\xf8\x68\x88\x69\xac\xf2\x6f\x91\x21\x7b\x06\x54\xd6\xca\x3c\xa0\x62\x94\xfd\xe1\xe3\xa4\xc3\x43\x4b\xf8\x4f\xc8\xd6\x2b\x2d\xf7\x81\x6c\x3f\x06\x1d\xeb\x3d\x7a\xe7\x7c\xe3\xe2\x44\xfc\x0e\x00\x00\xff\xff\x8d\x00\x14\xac\x7d\x04\x00\x00")

func kioskWorkerMainPyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerMainPy,
		"kiosk-worker/main.py",
	)
}

func kioskWorkerMainPy() (*asset, error) {
	bytes, err := kioskWorkerMainPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/main.py", size: 1149, mode: os.FileMode(436), modTime: time.Unix(1624193764, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kiosk-worker/common.py":      kioskWorkerCommonPy,
	"kiosk-worker/configs.py":     kioskWorkerConfigsPy,
	"kiosk-worker/controller.py":  kioskWorkerControllerPy,
	"kiosk-worker/ip_provider.py": kioskWorkerIp_providerPy,
	"kiosk-worker/main.py":        kioskWorkerMainPy,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"kiosk-worker": &bintree{nil, map[string]*bintree{
		"common.py":      &bintree{kioskWorkerCommonPy, map[string]*bintree{}},
		"configs.py":     &bintree{kioskWorkerConfigsPy, map[string]*bintree{}},
		"controller.py":  &bintree{kioskWorkerControllerPy, map[string]*bintree{}},
		"ip_provider.py": &bintree{kioskWorkerIp_providerPy, map[string]*bintree{}},
		"main.py":        &bintree{kioskWorkerMainPy, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
