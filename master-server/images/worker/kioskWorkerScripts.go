// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// kiosk-worker/alive.py
// kiosk-worker/common.py
// kiosk-worker/configs.py
// kiosk-worker/controller.py
// kiosk-worker/ip_provider.py
// kiosk-worker/main.py
package worker

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kioskWorkerAlivePy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x5d\x4f\xe3\x3a\x10\x7d\xcf\xaf\xf0\xf5\x0b\x89\x28\xa6\x97\xfb\x82\x22\xe5\xa1\x6a\x83\xa8\xe0\xb6\x57\x6d\x40\x77\x9f\xac\x6c\x32\x6d\x0c\xae\x9d\x9d\x71\xda\x45\x88\xff\xbe\x4a\x9a\xa6\xe5\xa3\x0b\xd2\xe6\xc9\x76\xc6\x67\xce\x1c\x9f\x19\xb5\x2a\x2d\x3a\xa6\xed\x72\xa9\xcc\xd2\x6b\xb7\x96\x44\x99\xba\x62\xb7\xa5\xac\x80\xbc\xd2\xb0\xdb\x3b\xb5\xda\xaf\x0b\x84\x34\xaf\xef\xee\x4e\x10\x7e\x54\x40\x8e\xba\x03\x55\xca\x12\xed\x5a\xe5\x80\x9e\x37\x8f\x67\xf7\xf1\x4c\x0e\x46\xa3\x59\x3c\x9f\xb3\x88\xf1\xc2\xb9\x32\x3c\x3f\x7f\x7e\x09\x2f\xfb\x97\x7d\x2e\x16\x16\x57\xa9\xf3\x2d\x89\x25\x38\x30\x6b\x9f\xdf\x8c\xa7\xf3\x1b\xb9\xbd\xc9\x7b\x8c\x6b\x9b\xa5\xba\xb0\xe4\x78\x10\x78\xc3\xe9\x64\x12\x0f\x93\xe9\xac\x09\x18\x0f\xe3\x43\xec\xf3\x47\x65\xe9\x91\x86\xd6\x18\xc8\x9c\x45\xee\x0d\xee\x92\xeb\x78\x92\x8c\x87\x83\x64\x3c\x9d\xc8\xeb\x78\x30\x8a\x67\xf2\x26\xfe\x56\x87\x0f\x2a\x57\x80\x71\x2a\x4b\x9d\xb2\x86\x7b\x3b\xc4\xe1\xe0\xf6\x56\x8e\x27\x49\x3c\xbb\x1f\xd4\x0b\x39\x8f\x87\xd3\xc9\xa8\x4e\xf1\x4f\xdf\x9b\xc7\x93\x44\x5e\xcd\xa6\xff\xca\xf1\x7f\xaf\x01\x4f\xfe\x3f\xbb\x42\xbb\x3a\x1b\x97\x27\x9e\xe7\xe5\xb0\x60\x1b\x8b\x8f\x80\xf2\xc1\x7e\xf7\x1f\x36\xae\xc7\x32\x6b\x1c\x5a\xad\x01\x25\x01\xae\x55\x06\xb2\xd6\x2c\x08\x3d\xc6\x58\x27\xbc\x80\x35\xe0\x93\xff\x19\x9d\x40\x10\x64\xd6\xe4\x24\x72\xeb\x67\xa9\xd6\x32\x43\x48\x1d\xc8\x15\xb8\xc2\xe6\x3d\xf6\xb0\x71\x51\x9d\xb6\x01\xff\x93\xef\x08\xed\xe8\x58\x39\x4d\xc2\x4d\xa1\x34\xb0\x04\x2b\x08\x3b\x02\x5d\x85\x58\x19\x59\x82\xa9\x9d\xe4\x07\xdd\xef\xda\x69\x82\x34\x40\xe9\xff\x1d\xb4\x12\x92\x4b\xd1\x49\x72\xa9\xab\x48\x56\x65\x5e\x17\xb8\x95\xf5\x2b\x92\x76\x7e\x15\x49\xb3\xf2\x5d\x8a\x4b\x70\xd1\xfe\x61\x7a\x2c\xc5\x25\x45\xbf\x07\x0b\x44\x43\xc3\xdf\x91\x7a\xaf\xf6\x97\xc8\xe0\xd3\x81\x14\x40\xa4\xac\x61\x51\xd7\x41\x62\xbe\x3d\x3a\x10\xa4\x0d\x12\x05\xa4\x39\x20\x89\x6d\xfd\xfe\xf3\x51\x5b\x87\xf5\xa3\xbf\x7c\x0e\x70\xc4\xc4\xe1\x61\xf7\xd6\x0d\x29\x55\xe9\x07\xec\x94\xf1\x90\xb3\x53\x46\x0e\xfd\x63\x25\x1e\x24\x45\xa0\xd2\x1a\x02\x16\x75\xf9\x4b\x4b\xce\x7f\x33\x0c\x4e\xd9\xd1\x66\xde\x63\xa9\x45\x07\x27\x5a\x13\x64\x36\x07\xf6\x57\xc4\x2e\xfa\x17\xe1\x2b\x6b\xb7\x63\x4d\x6c\x52\x34\xb5\xb1\xde\xf9\x9e\xc7\x88\x16\xd9\x16\x87\x35\x38\x08\xae\x42\x03\x79\x6b\xd7\x46\x1f\x65\x96\x4c\xa7\xe4\x98\x35\x5a\x19\x68\x6c\xd9\x7b\x75\xeb\xf9\xa5\x1b\x5c\x1f\x36\xd7\x47\x94\x83\x7d\x51\xa0\x09\x3e\xa6\xae\xcc\xc2\xfa\xfc\xee\x18\x0b\xb6\x50\x46\x51\x01\x39\xa3\x2a\xcb\x80\x68\x51\x69\xfd\xc4\xdf\xbf\x77\xa6\x2d\x41\x6b\x24\xf8\x99\x41\xb9\x1f\xd4\x62\xbb\x57\xd6\x90\x68\x27\xa5\xb2\xa6\x51\x66\xcf\xe9\xad\x94\x7c\x1f\xc9\xa0\x11\xf1\x13\xbd\x78\xe0\xfd\x0a\x00\x00\xff\xff\xc8\x8b\x03\x0c\x6d\x06\x00\x00")

func kioskWorkerAlivePyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerAlivePy,
		"kiosk-worker/alive.py",
	)
}

func kioskWorkerAlivePy() (*asset, error) {
	bytes, err := kioskWorkerAlivePyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/alive.py", size: 1645, mode: os.FileMode(436), modTime: time.Unix(1624385658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskWorkerCommonPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xc1\x0a\x02\x21\x10\x87\xf1\xfb\x3c\xc5\xdc\x56\x0f\x79\x08\x8a\x08\x7a\x96\xc5\xf2\xbf\x2a\x94\x2e\xe3\x08\xfb\xf8\x81\xd5\x25\xf6\xfe\xfb\xbe\xfc\x5a\xab\x28\x27\xdf\xd2\x33\xdf\x89\x28\x60\xe1\x08\x9d\x5b\xf2\xc7\xd3\xd9\x28\x36\xb5\x57\x62\xe6\x61\xe6\x88\x02\xf1\x5a\x85\x6f\xbf\xc8\x7d\xa9\xdd\x51\xae\xaf\xc1\x2b\xc6\xc6\xa1\x3c\x6a\x80\x99\xba\x2e\x87\xcb\x64\x3f\x5e\xa0\x5d\xca\x7f\x96\xb0\x85\x1c\xd1\xd4\x58\x7a\x07\x00\x00\xff\xff\x65\xbb\xed\xe6\xa3\x00\x00\x00")

func kioskWorkerCommonPyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerCommonPy,
		"kiosk-worker/common.py",
	)
}

func kioskWorkerCommonPy() (*asset, error) {
	bytes, err := kioskWorkerCommonPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/common.py", size: 163, mode: os.FileMode(436), modTime: time.Unix(1624188214, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskWorkerConfigsPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x8f\xdb\x38\x0c\xbd\xfb\x57\x10\x3a\xc9\x98\xc0\x33\x13\x60\x8b\x22\x80\x0f\x41\xe2\x66\x8d\xb6\x49\x91\x14\xbb\x87\xc5\x42\x50\x6d\xda\x51\xc7\xb6\xbc\xa2\x92\x19\xa0\xe8\x7f\x5f\xc8\x96\x93\xc9\xd7\xec\xa2\x3e\x99\x22\xf9\x48\x3d\x3e\x4a\xd5\xad\x36\x16\x8c\x6c\x72\x5d\x07\xde\x22\x6b\x54\x53\x0e\xd6\x77\xd2\xcd\xf0\x9f\xe9\xba\x3e\x5a\x06\xff\xd9\x21\x59\x1a\x6c\x4d\x51\x2b\xed\x76\x30\x2b\x5d\x96\x0e\x67\xb0\x55\x2b\x5a\xa3\xf7\x2a\x47\x13\x04\x9b\x64\xfd\x47\xb2\x16\xd3\xf9\x7c\x9d\x6c\x36\x10\x03\xdb\x5a\xdb\x4e\xee\xef\x7f\xfc\x9c\xbc\x7f\x78\xff\xc0\xa2\x42\x9b\x5a\x5a\xae\x29\x2a\xd1\x62\xb3\xe7\xec\x63\xba\xda\x7c\x14\x7d\x26\x1b\x01\xab\x74\x26\xab\xad\x26\xcb\xc2\x30\xe8\x9d\xe9\xe7\xe9\x22\x11\xe9\x1c\x62\xb8\x48\x1c\x7c\x2c\x0c\x66\xab\xe5\x32\x99\x7d\x5d\xad\x3b\xb4\x74\x96\xbc\x6e\xe4\xfe\x49\x69\x7a\xa2\x99\x6e\x1a\xcc\xac\x36\xcc\x85\x7f\x48\x17\xe2\x43\xfa\x29\x11\xcb\xe9\xe7\xc4\x45\x75\x41\x22\xd3\x4d\xa1\xca\xc8\x71\xc4\x82\x01\xeb\xcb\x74\xb3\xf9\x73\xb5\x9e\x8b\x4f\xc9\x72\xf1\xf5\x77\x88\xe1\xf1\x5d\x10\x04\x39\x16\x50\xa2\xf5\x39\x62\x2f\x8d\x92\xdf\x2a\x24\x51\x18\x5d\x0b\x07\xc1\x7b\x17\x85\x93\x00\x00\x40\x15\xe0\x0f\x40\x11\x2c\x75\x83\xfd\xb9\xfb\xf0\x45\x59\x3e\x1e\x3f\x86\xdd\x89\x41\xbb\x33\xcd\x10\xfd\x17\x53\x39\xfb\x7b\x74\x34\x5b\x49\xf4\xac\xcd\xe9\x21\xa1\xd9\xab\x0c\xbf\x1c\x7c\xbe\xc5\x4c\x56\x95\xc8\x0c\x4a\x8b\xa2\x46\xbb\xd5\xb9\x6b\xcb\x1a\x5d\x55\x68\x84\xcf\x12\x6e\xa2\xbe\xcd\x56\x13\xa9\x6f\x15\x8a\x6c\x2b\x0d\x41\xec\xf5\x13\x49\xca\x94\x12\x15\x5a\x8b\x86\xe0\x6e\x38\xce\x55\xa9\x2c\xf5\x99\xbe\xb6\x68\x2b\xa9\x1a\x8b\x2f\xd6\x31\xcb\xa2\xef\x5a\x35\xbc\xd7\x64\x94\x6d\xb5\xca\x90\xf8\x69\x95\x11\x3c\xc5\x37\xe8\x0e\x07\x4a\xa8\xd5\x0d\x21\xc4\x07\x9d\x46\xed\xce\xf2\x33\xe1\xdd\xc1\x4d\x2d\x8c\x0e\x64\x5f\xfb\xdc\xbc\xe2\x1f\xbd\x0c\xd2\x5a\x96\x98\xe6\x6c\x02\xaa\xb1\xfc\x54\x6d\xe1\xdb\x30\xfd\xd7\xc3\x4c\xf3\xdc\x20\x91\x83\x39\xae\x8a\x13\xb1\x50\x2d\x0f\xe1\x0e\xd8\x84\xf5\x3c\xde\x9c\xc8\xff\x2a\x76\x3e\xf9\xc9\x95\x41\xfc\xec\x59\xac\x77\x64\x05\xc9\x3d\x7a\xd5\x42\xdc\xe9\x70\x90\xe7\x40\x72\x44\x56\xda\x1d\x89\x4c\xe7\x08\x71\x0c\xe3\x87\xc7\xa3\x54\x0b\xb7\x8c\x2d\x36\xfc\x7c\x8d\x46\xc0\x9e\x59\x78\x88\xbb\x52\xeb\x80\xdf\x6d\xc7\x31\xd4\x3f\x2d\x91\x6a\x0a\xcd\xd9\x42\x5b\x2f\x6b\x70\xab\x04\xee\x7e\x68\x26\x30\x90\x75\x0e\x1c\xde\xae\x79\x65\x2d\x20\xf6\xcf\x5e\x37\x09\xda\xca\xf1\x6f\xef\xf8\x25\x61\x47\x4c\xbf\xdf\xae\x65\x88\x3b\x9d\x44\xf9\xae\x6e\xe9\xb2\x8f\x23\x45\xd1\xb3\x51\x16\xf9\xab\xd4\xd7\xce\xac\xd2\x84\xfc\x64\xd5\xff\xe3\x21\xb9\x2c\xe5\x97\xbb\x4f\x29\x54\x85\x02\x5f\x14\x59\xe2\x7e\x8b\x3d\xae\x7f\xc3\x23\x45\x2e\xe6\x62\x64\x03\x4e\xa5\x65\xee\xa1\x7d\xd9\x2e\xdc\x63\xbd\x35\x71\xe3\x27\xee\xda\x14\xb9\xb4\x12\x62\x28\x22\x83\x32\xf7\x17\xfc\x95\xeb\x76\x24\xbb\x9e\x88\x1f\x70\xc3\x30\xf8\x37\x00\x00\xff\xff\xf6\xe2\xa6\x3e\xde\x06\x00\x00")

func kioskWorkerConfigsPyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerConfigsPy,
		"kiosk-worker/configs.py",
	)
}

func kioskWorkerConfigsPy() (*asset, error) {
	bytes, err := kioskWorkerConfigsPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/configs.py", size: 1758, mode: os.FileMode(436), modTime: time.Unix(1624380726, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskWorkerControllerPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x5f\x6f\x9b\x30\x14\xc5\xdf\xfd\x29\xae\xd0\xd4\x80\xb4\x58\xda\x6b\x25\x1e\xa2\x96\x68\x91\x32\x8a\x06\x7b\xd8\x13\xa2\x70\xa1\xd6\x8c\x2f\xb2\xcd\x96\xae\xea\x77\x9f\x02\x76\x61\x9a\xd4\x2e\x7d\x4a\x7c\xee\x9f\xf3\xf3\x31\xa2\x1f\x48\x5b\x90\xd4\x75\x42\x75\xcc\x1d\xc9\xf8\x7f\x66\xbc\x1f\x34\xd5\x68\x0c\xf3\x52\x2b\x2b\xf3\x83\xb1\xe3\xae\x48\xf2\xa2\xcc\x6f\xbe\x26\x49\x9a\x7f\xbe\x2b\xca\xfd\xe1\x98\x94\xe9\xee\x4b\x02\x31\x04\xa6\xd6\x88\xca\x3c\x90\xe5\x83\xea\x02\xc6\x58\x83\x2d\x74\x68\xcb\xa5\x12\x46\xd7\x0c\x00\x80\x0c\x37\x8f\xc6\x62\x1f\x06\x78\x9a\x3c\x6e\x0f\x79\x76\xdc\x7d\x8f\xaf\x3f\xc1\xd5\x15\x98\x5a\x93\x85\xed\x6f\xd8\x12\x3c\x3d\xc3\x16\x61\xd3\xff\x84\x0f\x2d\xf0\x4d\xc0\x5b\xd2\x7d\x65\xc3\x57\x70\xa2\x68\x72\xd1\x68\x47\xad\x66\x7c\x6e\x50\x35\x65\x2b\x24\xbe\x3a\xe8\xa8\xf1\x84\xf5\x68\xb1\xac\xa9\xef\x2b\xd5\x84\xee\xd7\xd1\xbb\x7c\x20\x86\x94\x14\x4e\x92\xd5\x8f\x73\xed\xef\xfa\x12\x26\xcf\x68\x40\xe5\x17\x71\x33\x48\x61\xc3\xe8\x23\x18\xdb\xd0\x68\xe3\x75\xe3\x21\x4b\x26\x1d\xb5\x5e\xeb\x79\x71\x7b\xf7\xad\x88\x5e\x5c\xe6\x49\xdf\x09\xb1\xb7\xe5\x67\x8f\x51\x89\xba\xb2\x18\x2e\xed\x2e\x8c\x79\x6a\x52\xf1\x54\xe3\xb0\x7e\x70\x7e\x53\x49\x89\x4d\x36\x9f\x12\xad\x49\x2f\x97\x72\x1f\x0c\xc7\xb3\x1c\x06\x53\x15\x84\x02\x77\x23\x17\x99\x20\x05\x9b\xa7\xe7\xe5\x95\x7c\x72\xff\x80\x78\xcf\x19\x9f\x6b\xac\x1a\x47\xeb\xb8\xf6\x42\x62\x4a\x76\x4f\xa3\x6a\xde\x60\x99\xac\xab\x7b\x89\xa0\xc8\x42\x7b\x9e\x80\x96\xf4\x0b\xdb\xff\x11\xbd\x73\xcf\x8a\xf9\x8d\xb4\x7e\x3d\x08\x89\x3e\x28\xd5\x5d\x8c\x77\xf9\x12\xf6\x27\x00\x00\xff\xff\xa1\xa3\xe1\xb3\xee\x03\x00\x00")

func kioskWorkerControllerPyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerControllerPy,
		"kiosk-worker/controller.py",
	)
}

func kioskWorkerControllerPy() (*asset, error) {
	bytes, err := kioskWorkerControllerPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/controller.py", size: 1006, mode: os.FileMode(436), modTime: time.Unix(1624192603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskWorkerIp_providerPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\x5d\x6b\xdb\x30\x14\x7d\xd7\xaf\xb8\xb8\x0f\xb5\xa1\xc8\xfd\xd8\xc3\x28\xf8\xc1\x4b\xbc\xce\x34\x4d\x42\x93\x16\xc6\x18\x42\x53\xae\x13\x11\x5b\xd7\x93\x6e\xda\xb5\xbf\x7e\x38\x8e\xd7\x6c\x6c\x43\x0f\xe2\x7e\x9c\xc3\xb9\xe7\xd8\xa6\x25\xcf\x10\xc8\x6c\x91\xc5\xa1\xf2\xf8\x7d\x87\x81\xc3\x50\x53\x10\x62\x32\x1b\xe5\x13\x55\xce\x55\x31\x7d\x54\xb7\xc5\x67\xc8\x20\xea\x7b\x77\xf9\xe8\x53\x39\x2d\x22\x91\x8f\xc7\xf7\xc5\x62\xa1\x96\x33\x75\x53\x2c\xd5\xfc\xe1\xc3\xa4\x1c\xa9\x72\xde\xad\x6e\x98\xdb\x70\x9d\xa6\xba\xb5\xd2\xb6\xb6\x7a\x91\xe4\xd7\x69\xf4\x46\x3b\x80\x1f\xf3\xc9\x43\x01\x19\x4c\xc9\xa1\x10\xe2\x04\x98\x56\x04\xaf\xfa\x55\x83\x23\x46\xd9\x75\x36\x36\x80\xa1\x15\x02\xb9\xfa\x05\x2a\xf2\xc0\x18\xd8\xba\x35\x90\x83\x46\x9b\x8d\x75\x18\xe0\xd9\xf2\x06\x1c\x39\x68\x77\xdf\x6a\x6b\xc0\xb6\xe2\xa4\x87\xd9\x00\xac\xb7\xe8\xa0\xf2\xd4\xc0\x20\x2d\xb0\x36\x5b\x7a\x42\x5f\xd5\xf4\x2c\x0d\x35\xa9\x4e\x2f\xaf\xde\x5f\x5e\xbe\xbb\xba\x10\x2b\xac\x60\x8d\xac\x6a\x32\xba\x56\xb6\x8d\x93\x6b\x01\x00\x10\x20\x3b\x98\x27\xfb\x2f\x3e\x54\xf9\x47\x55\x4e\x8b\xe5\xd9\x30\x5d\xcc\x46\xb7\x6a\x7c\x73\x9f\xdf\x25\x3d\x50\x1a\x72\x0e\x0d\xc7\xf1\xe9\x85\xdc\xbf\xd3\x33\x38\x4f\xfa\xa9\x47\xde\x79\x07\x41\xae\x91\x3b\x02\xa7\x1b\x8c\x93\x2f\xe7\x5f\x85\xf8\x25\xa5\x3f\xeb\x48\xcb\x01\x34\xa4\xd7\x61\xe3\x7f\x65\x92\x48\xc6\x1f\x7c\xc4\xf6\x46\x63\x2b\xa0\x3d\x18\xdd\x53\xfc\x67\xec\x49\x67\x9e\x23\xde\xe7\x03\xda\xad\xfe\xbb\x9b\x65\x10\xb1\xdf\x61\xd4\x33\x1f\x89\xfc\xdd\xcb\xfd\x14\xeb\x80\x7f\xdd\x3b\x3a\x54\xfc\x0c\x00\x00\xff\xff\xfa\x02\x4d\x99\xb0\x02\x00\x00")

func kioskWorkerIp_providerPyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerIp_providerPy,
		"kiosk-worker/ip_provider.py",
	)
}

func kioskWorkerIp_providerPy() (*asset, error) {
	bytes, err := kioskWorkerIp_providerPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/ip_provider.py", size: 688, mode: os.FileMode(436), modTime: time.Unix(1624310503, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskWorkerMainPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xdf\x6b\xdb\x30\x10\x7e\xd7\x5f\x71\x73\x1f\xe2\x40\xea\x66\xdd\x3a\xc6\xc0\xb0\xd0\xa5\x34\x50\x9a\x92\xa6\x7b\x29\x45\xa8\xd6\xb9\x16\x91\x25\x4f\x77\xee\x8f\xfd\xf5\xc3\x76\x9c\xa6\xa1\x2d\x83\xb1\xe4\xc1\xdc\xe9\xee\xbb\xef\xbb\xcf\xd6\xde\x87\x83\x5b\xe3\x0e\xaa\x27\x2e\xbc\xfb\x24\xf6\xa0\x32\x15\x18\x47\xac\xac\x85\x80\xbf\x6a\x24\xa6\x9d\xf4\x89\x55\xb4\x12\x7b\x40\xb5\xf6\xa0\x2a\xde\x1c\xec\x3f\x01\x65\xc1\xb3\xc8\x83\x2f\x21\x6f\xca\xc0\x94\x95\x0f\xdc\x43\x89\x75\x98\xf9\xb2\xf4\xee\x39\x72\xb9\xb9\xa3\x3e\x6c\x1b\xc5\xd6\x21\x07\x6f\x2d\x86\x3e\xa3\xac\xb9\x47\x21\x54\x65\x20\xed\x8a\x93\x96\x52\x2c\xa5\x53\x25\x4a\x39\x14\x62\x72\xb5\x3c\x9d\x9e\x2f\x67\xc7\x93\xe5\x6c\x7e\x2e\x4f\xa7\x93\x1f\xd3\x05\xa4\x30\x98\xd4\x5c\xa0\x63\x93\x29\x36\xde\x0d\xc4\xf1\xfc\x7c\xb9\x98\x9f\x9d\x4d\x17\xf2\x72\xba\xf8\x39\x3b\x9e\xca\x8b\xf9\x62\x09\x29\x1c\x8d\xc7\x63\x21\x84\xc6\x1c\xb2\x02\xb3\x95\x54\x2f\x5a\xe3\xe1\x37\x01\x00\x60\x72\x78\x7d\x98\x71\xbd\xea\xa4\x40\xa5\x31\x50\xd7\xd0\xfc\x1a\x28\xd9\x65\x21\xdd\x2d\xbb\x7e\x15\xef\x66\xd3\x1c\x90\xeb\xe0\xd6\x3b\x4c\xee\x90\x25\x15\xea\xf0\xe8\x4b\xbc\x85\x3a\x84\x34\x05\xc2\x70\x6f\x32\xbc\x50\x44\x0f\x3e\x68\xb1\xd5\x7c\xa2\x2c\xa1\x10\xe2\xbb\xaa\x4c\x12\x7c\xcd\x18\x47\x07\x94\x05\x44\x47\x85\xe7\x68\xd8\xea\x6e\xb1\x37\xc9\x2d\xc5\xce\xf3\xbb\x4b\xd9\x9a\x14\x5d\xb9\xa6\xc6\x07\xf3\x1b\x75\x34\x82\xcf\xe3\x8f\xe2\x85\x8a\xde\xde\x64\x77\xda\x08\x0e\x5b\x07\x5e\x70\xc4\x47\xcc\x6a\xc6\x68\x04\x25\x72\xe1\x35\xa5\xd7\xd1\xc5\xfc\x72\x19\xdd\x74\x94\xd7\xe7\xb2\xd9\x8e\x72\xfa\x7f\x73\xde\x1d\xd7\x5b\xa9\x15\xab\x44\x63\xe6\x35\xc6\x51\xcd\xf9\xfe\xd7\x68\xb8\x11\x64\x72\xe8\x5f\xd5\xc6\xa6\x81\x94\xa5\x32\x4e\xca\x41\x47\xe4\xce\xfa\x5b\x65\x61\x65\x3c\xad\x66\x7a\xd4\xda\x88\xa1\x77\x71\xf4\xaa\xad\xbd\xbe\xee\x4b\x4a\xba\xa7\xcc\x8d\x45\x89\x8f\x86\x98\xb6\x55\xfe\x2d\x32\xa4\xcf\x80\xca\x5a\x99\x05\x54\x8c\xb2\x5b\x7c\xfc\xc6\x97\x33\x6c\xc7\xa0\x25\xfc\xa7\x81\xd6\x2b\x2d\xd7\x81\x6c\xee\x93\x56\x4c\xdc\xa1\xb7\x37\x40\x42\xac\x02\x4b\x62\xc5\x35\xc9\xba\xd2\x0d\xb7\x07\x1f\x56\x18\xe2\xdd\x39\xef\x72\x6d\x5f\xaf\xda\xc5\x85\x27\x4e\xa3\x71\xd2\xfe\xa3\x11\x34\x97\x4d\xfa\x66\xe7\x9f\x00\x00\x00\xff\xff\x69\x5f\x84\x24\x3a\x05\x00\x00")

func kioskWorkerMainPyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerMainPy,
		"kiosk-worker/main.py",
	)
}

func kioskWorkerMainPy() (*asset, error) {
	bytes, err := kioskWorkerMainPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/main.py", size: 1338, mode: os.FileMode(436), modTime: time.Unix(1624385658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kiosk-worker/alive.py":       kioskWorkerAlivePy,
	"kiosk-worker/common.py":      kioskWorkerCommonPy,
	"kiosk-worker/configs.py":     kioskWorkerConfigsPy,
	"kiosk-worker/controller.py":  kioskWorkerControllerPy,
	"kiosk-worker/ip_provider.py": kioskWorkerIp_providerPy,
	"kiosk-worker/main.py":        kioskWorkerMainPy,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"kiosk-worker": &bintree{nil, map[string]*bintree{
		"alive.py":       &bintree{kioskWorkerAlivePy, map[string]*bintree{}},
		"common.py":      &bintree{kioskWorkerCommonPy, map[string]*bintree{}},
		"configs.py":     &bintree{kioskWorkerConfigsPy, map[string]*bintree{}},
		"controller.py":  &bintree{kioskWorkerControllerPy, map[string]*bintree{}},
		"ip_provider.py": &bintree{kioskWorkerIp_providerPy, map[string]*bintree{}},
		"main.py":        &bintree{kioskWorkerMainPy, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
