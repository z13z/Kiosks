// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// kiosk-worker/alive.py
// kiosk-worker/common.py
// kiosk-worker/configs.py
// kiosk-worker/controller.py
// kiosk-worker/ip_provider.py
// kiosk-worker/main.py
package worker

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kioskWorkerAlivePy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x5d\x4f\xe3\x3a\x10\x7d\xcf\xaf\xf0\xf5\x0b\x89\x28\xa6\x97\xfb\x82\x22\xe5\xa1\x6a\x83\xa8\xe0\xb6\x57\x6d\x40\x77\x9f\xac\x6c\x32\x6d\x0c\xae\x9d\x9d\x71\xda\x45\x88\xff\xbe\x4a\x9a\xa6\xe5\xa3\x0b\xd2\xe6\xc9\x76\xc6\x67\xce\x1c\x9f\x19\xb5\x2a\x2d\x3a\xa6\xed\x72\xa9\xcc\xd2\x6b\xb7\x96\x44\x99\xba\x62\xb7\xa5\xac\x80\xbc\xd2\xb0\xdb\x3b\xb5\xda\xaf\x0b\x84\x34\xaf\xef\xee\x4e\x10\x7e\x54\x40\x8e\xba\x03\x55\xca\x12\xed\x5a\xe5\x80\x9e\x37\x8f\x67\xf7\xf1\x4c\x0e\x46\xa3\x59\x3c\x9f\xb3\x88\xf1\xc2\xb9\x32\x3c\x3f\x7f\x7e\x09\x2f\xfb\x97\x7d\x2e\x16\x16\x57\xa9\xf3\x2d\x89\x25\x38\x30\x6b\x9f\xdf\x8c\xa7\xf3\x1b\xb9\xbd\xc9\x7b\x8c\x6b\x9b\xa5\xba\xb0\xe4\x78\x10\x78\xc3\xe9\x64\x12\x0f\x93\xe9\xac\x09\x18\x0f\xe3\x43\xec\xf3\x47\x65\xe9\x91\x86\xd6\x18\xc8\x9c\x45\xee\x0d\xee\x92\xeb\x78\x92\x8c\x87\x83\x64\x3c\x9d\xc8\xeb\x78\x30\x8a\x67\xf2\x26\xfe\x56\x87\x0f\x2a\x57\x80\x71\x2a\x4b\x9d\xb2\x86\x7b\x3b\xc4\xe1\xe0\xf6\x56\x8e\x27\x49\x3c\xbb\x1f\xd4\x0b\x39\x8f\x87\xd3\xc9\xa8\x4e\xf1\x4f\xdf\x9b\xc7\x93\x44\x5e\xcd\xa6\xff\xca\xf1\x7f\xaf\x01\x4f\xfe\x3f\xbb\x42\xbb\x3a\x1b\x97\x27\x9e\xe7\xe5\xb0\x60\x1b\x8b\x8f\x80\xf2\xc1\x7e\xf7\x1f\x36\xae\xc7\x32\x6b\x1c\x5a\xad\x01\x25\x01\xae\x55\x06\xb2\xd6\x2c\x08\x3d\xc6\x58\x27\xbc\x80\x35\xe0\x93\xff\x19\x9d\x40\x10\x64\xd6\xe4\x24\x72\xeb\x67\xa9\xd6\x32\x43\x48\x1d\xc8\x15\xb8\xc2\xe6\x3d\xf6\xb0\x71\x51\x9d\xb6\x01\xff\x93\xef\x08\xed\xe8\x58\x39\x4d\xc2\x4d\xa1\x34\xb0\x04\x2b\x08\x3b\x02\x5d\x85\x58\x19\x59\x82\xa9\x9d\xe4\x07\xdd\xef\xda\x69\x82\x34\x40\xe9\xff\x1d\xb4\x12\x92\x4b\xd1\x49\x72\xa9\xab\x48\x56\x65\x5e\x17\xb8\x95\xf5\x2b\x92\x76\x7e\x15\x49\xb3\xf2\x5d\x8a\x4b\x70\xd1\xfe\x61\x7a\x2c\xc5\x25\x45\xbf\x07\x0b\x44\x43\xc3\xdf\x91\x7a\xaf\xf6\x97\xc8\xe0\xd3\x81\x14\x40\xa4\xac\x61\x51\xd7\x41\x62\xbe\x3d\x3a\x10\xa4\x0d\x12\x05\xa4\x39\x20\x89\x6d\xfd\xfe\xf3\x51\x5b\x87\xf5\xa3\xbf\x7c\x0e\x70\xc4\xc4\xe1\x61\xf7\xd6\x0d\x29\x55\xe9\x07\xec\x94\xf1\x90\xb3\x53\x46\x0e\xfd\x63\x25\x1e\x24\x45\xa0\xd2\x1a\x02\x16\x75\xf9\x4b\x4b\xce\x7f\x33\x0c\x4e\xd9\xd1\x66\xde\x63\xa9\x45\x07\x27\x5a\x13\x64\x36\x07\xf6\x57\xc4\x2e\xfa\x17\xe1\x2b\x6b\xb7\x63\x4d\x6c\x52\x34\xb5\xb1\xde\xf9\x9e\xc7\x88\x16\xd9\x16\x87\x35\x38\x08\xae\x42\x03\x79\x6b\xd7\x46\x1f\x65\x96\x4c\xa7\xe4\x98\x35\x5a\x19\x68\x6c\xd9\x7b\x75\xeb\xf9\xa5\x1b\x5c\x1f\x36\xd7\x47\x94\x83\x7d\x51\xa0\x09\x3e\xa6\xae\xcc\xc2\xfa\xfc\xee\x18\x0b\xb6\x50\x46\x51\x01\x39\xa3\x2a\xcb\x80\x68\x51\x69\xfd\xc4\xdf\xbf\x77\xa6\x2d\x41\x6b\x24\xf8\x99\x41\xb9\x1f\xd4\x62\xbb\x57\xd6\x90\x68\x27\xa5\xb2\xa6\x51\x66\xcf\xe9\xad\x94\x7c\x1f\xc9\xa0\x11\xf1\x13\xbd\x78\xe0\xfd\x0a\x00\x00\xff\xff\xc8\x8b\x03\x0c\x6d\x06\x00\x00")

func kioskWorkerAlivePyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerAlivePy,
		"kiosk-worker/alive.py",
	)
}

func kioskWorkerAlivePy() (*asset, error) {
	bytes, err := kioskWorkerAlivePyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/alive.py", size: 1645, mode: os.FileMode(436), modTime: time.Unix(1624385658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskWorkerCommonPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xc1\x0a\x02\x21\x10\x87\xf1\xfb\x3c\xc5\xdc\x56\x0f\x79\x08\x8a\x08\x7a\x96\xc5\xf2\xbf\x2a\x94\x2e\xe3\x08\xfb\xf8\x81\xd5\x25\xf6\xfe\xfb\xbe\xfc\x5a\xab\x28\x27\xdf\xd2\x33\xdf\x89\x28\x60\xe1\x08\x9d\x5b\xf2\xc7\xd3\xd9\x28\x36\xb5\x57\x62\xe6\x61\xe6\x88\x02\xf1\x5a\x85\x6f\xbf\xc8\x7d\xa9\xdd\x51\xae\xaf\xc1\x2b\xc6\xc6\xa1\x3c\x6a\x80\x99\xba\x2e\x87\xcb\x64\x3f\x5e\xa0\x5d\xca\x7f\x96\xb0\x85\x1c\xd1\xd4\x58\x7a\x07\x00\x00\xff\xff\x65\xbb\xed\xe6\xa3\x00\x00\x00")

func kioskWorkerCommonPyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerCommonPy,
		"kiosk-worker/common.py",
	)
}

func kioskWorkerCommonPy() (*asset, error) {
	bytes, err := kioskWorkerCommonPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/common.py", size: 163, mode: os.FileMode(436), modTime: time.Unix(1624188214, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskWorkerConfigsPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xdf\x8f\xdb\x36\x0c\x7e\xf7\x5f\x41\x68\x2f\x36\x2e\xf0\xfd\x00\x56\x14\x01\xfc\x10\xdc\xb9\xb7\xa0\x6d\xae\x48\x8a\xed\x61\x18\x04\xd5\xa6\x13\xf5\x6c\xc9\x13\x99\xdc\xa1\x45\xff\xf7\x41\xb6\xec\xdc\xe5\x47\x37\x4c\x4f\x11\x45\x7e\xa4\x3f\x7e\x64\x74\xd3\x5a\xc7\xf0\x95\xac\x89\xc2\xef\xda\xae\xd7\xda\xac\x87\xab\xa5\xb4\x55\xbc\x19\xae\x4e\x99\xd2\x36\xc3\x8d\xd8\x79\xd7\xf1\x11\xff\xde\x22\x31\x8d\x86\xc2\x36\xcd\x1e\x59\xb7\xb2\x75\x76\xa7\x4b\x74\x51\xb4\xca\x97\xbf\xe7\x4b\x39\xbb\xbb\x5b\xe6\xab\x15\x64\x20\x36\xcc\xed\xf4\xf2\xf2\xfb\x8f\xe9\xdb\xab\xb7\x57\x22\xad\xac\x6b\x14\xc7\x96\xd2\x35\x32\x9a\x5d\x2c\xde\xcf\x1f\x56\xef\x65\x1f\x29\x26\x20\x6a\x5b\xa8\x7a\x63\x89\x45\x92\x44\xfd\xe3\xfc\xe3\xec\x3e\x97\xf3\x3b\xc8\xe0\x28\x70\x78\x13\x49\x74\xfb\xb0\x58\xe4\xb7\x9f\x1f\x96\x1d\xda\xfc\x36\x7f\x59\xc8\xe5\xa3\xb6\xf4\x48\xb7\xd6\x18\x2c\xd8\x3a\xe1\xdd\xdf\xcd\xef\xe5\xbb\xf9\x87\x5c\x2e\x66\x1f\x73\xef\xd5\x39\xc9\xc2\x9a\x4a\xaf\x53\x4f\xa0\x88\x06\xac\x4f\xb3\xd5\xea\x8f\x87\xe5\x9d\xfc\x90\x2f\xee\x3f\xff\x06\x19\x5c\xbf\x89\xa2\xa8\xc4\x0a\xd6\xc8\x21\x46\xee\x94\xd3\xea\x4b\x8d\x24\x2b\x67\x1b\xe9\x21\xe2\xfe\x89\x92\x69\x04\x00\xa0\x2b\x08\x06\xd0\x04\x0b\x6b\xb0\xb7\xfb\x83\xcf\x9a\xe3\x9b\x9b\xeb\xa4\xb3\x38\xe4\xad\x33\x83\xf7\x9f\x42\x97\xe2\xaf\xc9\xfe\xda\x2a\xa2\x27\xeb\x5e\x1b\x09\xdd\x4e\x17\xf8\x69\x7c\x0b\x25\x16\xaa\xae\x65\xe1\x50\x31\xca\x06\x79\x63\x4b\x5f\x16\x3b\x5b\xd7\xe8\x64\x88\x92\xbe\xa3\xa1\xcc\xd6\x12\xe9\x2f\x35\xca\x62\xa3\x1c\x41\x16\x64\x91\x2a\x2a\xb4\x96\x35\x32\xa3\x23\xb8\x18\xcc\xa5\x5e\x6b\xa6\x3e\x32\xe4\x96\x6d\xad\xb4\x61\x7c\x66\xcf\xac\x48\xbf\x5a\x6d\xe2\x5e\x6a\x69\xb1\xb1\xba\x40\x8a\x5f\x67\x99\xc0\x63\x76\x86\xee\xa4\xa7\xe4\x17\x60\x5b\x5a\xf8\xa6\xbe\x29\x70\xd8\xd8\x1d\x76\xe6\x20\xef\x54\x9b\xca\xc6\xe2\x1e\x0d\x3a\xc5\x58\x8e\xa5\x78\xa6\x05\x5c\x9c\x28\x6d\x60\x9a\x5a\x6b\x08\x21\x1b\xe5\x9e\xb6\x5b\x8e\x0f\xf4\x7c\x01\x67\x25\x36\x19\x7b\x78\xea\x78\x19\x64\xdf\x7b\x75\xcd\x1b\xb5\xc6\x79\x29\xa6\xa0\x0d\xc7\xaf\x45\x9c\xfc\x1c\xa6\x3f\x3d\xcc\xac\x2c\x1d\x12\x79\x98\xfd\x04\xfa\xd9\x90\xba\x8d\x13\xb8\x00\x31\x15\x7d\x7b\xce\x36\xfa\x3f\x25\x3b\x14\xd4\xf4\x04\x89\x3f\x7a\x16\x9b\x2d\xb1\x24\xb5\xc3\x30\x0c\x90\x75\xf2\x1e\x54\x3f\x90\x9c\x12\x2b\xde\x92\x2c\x6c\x89\x90\x65\x70\x73\x75\xbd\x9f\x80\xca\xcf\x78\x8b\x26\x3e\x9c\xce\x09\x88\x27\x91\x8c\x7e\x27\x72\x8d\xf8\xdd\xd0\xed\x5d\x0f\xc4\x61\x39\x4c\x0b\xf8\x09\x05\xff\x7d\xe8\xa6\x30\x90\x75\x08\x9c\x9c\xcf\x79\x62\xda\x20\x0b\xeb\xb1\xeb\x04\x6d\xd4\xcd\xaf\x6f\xe2\x73\xaa\xf3\x27\xac\x0d\x5f\x32\x64\x9d\x4e\xd2\x72\xdb\xb4\x74\x5c\xc7\x9e\xa2\xf4\xc9\x69\xc6\xf8\x45\xe8\xcb\xc7\xa2\xb6\x84\xf1\xab\x0d\xf2\x2f\xfb\xe9\x38\x55\xd8\x19\x7d\x48\xa5\x6b\x94\xf8\xac\x89\x29\x0e\xcb\x21\xe0\x86\xbf\x91\x54\x93\xf7\x39\x6a\xd9\x80\x53\x5b\x55\x06\xe8\x90\xb6\x73\x0f\x58\x3f\xeb\xb8\x0b\x1d\xf7\x65\xca\x52\xb1\x82\x0c\xaa\xd4\xa1\x2a\xc3\x07\xfe\x9f\xcf\xed\x48\xf6\x35\x51\x3c\xe2\x26\x49\xf4\x4f\x00\x00\x00\xff\xff\xe4\x6b\x2d\x05\x36\x07\x00\x00")

func kioskWorkerConfigsPyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerConfigsPy,
		"kiosk-worker/configs.py",
	)
}

func kioskWorkerConfigsPy() (*asset, error) {
	bytes, err := kioskWorkerConfigsPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/configs.py", size: 1846, mode: os.FileMode(436), modTime: time.Unix(1624471023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskWorkerControllerPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xc1\x6b\xab\x40\x10\xc6\xef\xfb\x57\x0c\x5e\xa2\xf0\xd8\xdc\x1f\x78\x08\x2f\x06\x02\x79\x36\x10\x7b\x16\xe3\x8e\x66\xc9\xba\x23\xbb\x2b\x4d\x29\xfd\xdf\x8b\xba\x26\x96\x16\xd2\xf4\x24\x7e\x33\xf3\x7d\xbf\x99\x95\x4d\x4b\xc6\x81\xa2\xba\x96\xba\x66\xfe\xd7\x76\xc7\xd6\x50\x89\xd6\xb2\x49\xaa\x54\x61\xcf\x8c\xed\x56\x59\x72\xc8\xf2\x43\x92\xae\xf3\xcd\x76\x97\xe4\xe9\xea\x7f\x02\x31\x04\xcb\x13\x35\xb8\x3c\x4b\xb2\xe7\x65\x25\x15\xf2\x56\xd7\x01\x63\x4c\x60\x05\x35\xba\xdc\x96\x06\x51\xdb\x13\xb9\x30\xfa\xcb\x00\x00\x0c\xba\xce\xe8\xd1\x98\x5b\xd4\x22\xef\xe7\xc2\x6f\x13\x22\xef\x84\x17\x2c\x3b\x87\x79\x49\x4d\x53\x68\x11\xfa\xaf\x77\xf4\xcc\x10\x43\x4a\x1a\x07\xc9\x99\xd7\xb1\xf6\xb9\x7e\x5b\x90\xef\xa9\x45\x3d\x19\x71\xdb\x2a\xe9\xc2\xe8\x0f\x58\x27\xa8\x73\xf1\xbc\x71\xbb\x4f\x06\x1d\x8d\x99\xeb\x87\x6c\xfd\xf4\x9c\x45\xd7\x94\x71\x72\xea\x84\x78\x8a\xe5\x7d\x46\xa7\x65\x59\x38\x0c\x6f\xed\xfe\x0c\xe3\xd4\xa0\xe2\xa5\xc4\x76\xfe\x08\xfc\x5f\xa1\x14\x8a\xfd\xf8\x97\x18\x43\xe6\xb6\x94\x7f\x3a\x8e\xbd\x1c\x06\x43\x15\xa4\x06\xbf\x91\x3f\x99\x24\x0d\x8b\xb7\xf7\x45\xc0\x2b\x32\x4d\xe1\xae\x97\xfb\x02\x32\x65\x8e\xf8\xdc\x60\x21\x3c\xad\xe7\xda\x48\x85\x29\xb9\x0d\x75\x5a\xdc\x61\x19\xa2\x8b\xa3\x42\xd0\xe4\xa0\xea\x27\xa0\x22\x73\x65\xfb\x19\xd1\x2f\x7d\x66\xcc\x77\xae\xf5\x72\x92\x0a\xa7\x43\xe9\xfa\x61\xbc\xc7\x4d\xd8\x47\x00\x00\x00\xff\xff\xe9\x98\x45\x5c\x78\x03\x00\x00")

func kioskWorkerControllerPyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerControllerPy,
		"kiosk-worker/controller.py",
	)
}

func kioskWorkerControllerPy() (*asset, error) {
	bytes, err := kioskWorkerControllerPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/controller.py", size: 888, mode: os.FileMode(436), modTime: time.Unix(1624398484, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskWorkerIp_providerPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\x5d\x6b\xdb\x30\x14\x7d\xd7\xaf\xb8\xb8\x0f\xb5\xa1\xc8\xfd\xd8\xc3\x28\xf8\xc1\x4b\xbc\xce\x34\x4d\x42\x93\x16\xc6\x18\x42\x53\xae\x13\x11\x5b\xd7\x93\x6e\xda\xb5\xbf\x7e\x38\x8e\xd7\x6c\x6c\x43\x0f\xe2\x7e\x9c\xc3\xb9\xe7\xd8\xa6\x25\xcf\x10\xc8\x6c\x91\xc5\xa1\xf2\xf8\x7d\x87\x81\xc3\x50\x53\x10\x62\x32\x1b\xe5\x13\x55\xce\x55\x31\x7d\x54\xb7\xc5\x67\xc8\x20\xea\x7b\x77\xf9\xe8\x53\x39\x2d\x22\x91\x8f\xc7\xf7\xc5\x62\xa1\x96\x33\x75\x53\x2c\xd5\xfc\xe1\xc3\xa4\x1c\xa9\x72\xde\xad\x6e\x98\xdb\x70\x9d\xa6\xba\xb5\xd2\xb6\xb6\x7a\x91\xe4\xd7\x69\xf4\x46\x3b\x80\x1f\xf3\xc9\x43\x01\x19\x4c\xc9\xa1\x10\xe2\x04\x98\x56\x04\xaf\xfa\x55\x83\x23\x46\xd9\x75\x36\x36\x80\xa1\x15\x02\xb9\xfa\x05\x2a\xf2\xc0\x18\xd8\xba\x35\x90\x83\x46\x9b\x8d\x75\x18\xe0\xd9\xf2\x06\x1c\x39\x68\x77\xdf\x6a\x6b\xc0\xb6\xe2\xa4\x87\xd9\x00\xac\xb7\xe8\xa0\xf2\xd4\xc0\x20\x2d\xb0\x36\x5b\x7a\x42\x5f\xd5\xf4\x2c\x0d\x35\xa9\x4e\x2f\xaf\xde\x5f\x5e\xbe\xbb\xba\x10\x2b\xac\x60\x8d\xac\x6a\x32\xba\x56\xb6\x8d\x93\x6b\x01\x00\x10\x20\x3b\x98\x27\xfb\x2f\x3e\x54\xf9\x47\x55\x4e\x8b\xe5\xd9\x30\x5d\xcc\x46\xb7\x6a\x7c\x73\x9f\xdf\x25\x3d\x50\x1a\x72\x0e\x0d\xc7\xf1\xe9\x85\xdc\xbf\xd3\x33\x38\x4f\xfa\xa9\x47\xde\x79\x07\x41\xae\x91\x3b\x02\xa7\x1b\x8c\x93\x2f\xe7\x5f\x85\xf8\x25\xa5\x3f\xeb\x48\xcb\x01\x34\xa4\xd7\x61\xe3\x7f\x65\x92\x48\xc6\x1f\x7c\xc4\xf6\x46\x63\x2b\xa0\x3d\x18\xdd\x53\xfc\x67\xec\x49\x67\x9e\x23\xde\xe7\x03\xda\xad\xfe\xbb\x9b\x65\x10\xb1\xdf\x61\xd4\x33\x1f\x89\xfc\xdd\xcb\xfd\x14\xeb\x80\x7f\xdd\x3b\x3a\x54\xfc\x0c\x00\x00\xff\xff\xfa\x02\x4d\x99\xb0\x02\x00\x00")

func kioskWorkerIp_providerPyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerIp_providerPy,
		"kiosk-worker/ip_provider.py",
	)
}

func kioskWorkerIp_providerPy() (*asset, error) {
	bytes, err := kioskWorkerIp_providerPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/ip_provider.py", size: 688, mode: os.FileMode(436), modTime: time.Unix(1624310503, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskWorkerMainPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x51\x6b\xdb\x3c\x14\x7d\xd7\xaf\xb8\x9f\xfa\x10\x87\x2f\x75\xb3\x6e\x1d\x63\x60\x58\xe8\x52\x1a\x28\x4d\x49\xdd\xbd\x94\x22\x54\xeb\xda\x16\x91\x25\x4f\x92\x9b\x76\xbf\x7e\xd8\x8e\x13\xc7\xb4\x65\x30\xe6\x3c\x04\x5d\xdd\x7b\xce\xb9\xba\x47\x3a\xfa\xef\xe4\x51\xea\x93\xf2\xc5\xe7\x46\x7f\x24\x47\x50\xca\x12\xa4\x76\x9e\x2b\x05\x16\x7f\x56\xe8\xbc\x1b\x84\x2f\x14\x77\x6b\x72\x04\xae\x12\x06\x78\xe9\x77\x1b\xc7\x2f\xe0\x12\x6b\x3c\x91\x45\x69\xac\x07\x65\xb2\x4c\xea\x8c\x90\xd4\x9a\x02\xd2\xba\x0c\xb6\x5b\x5b\xe8\x2e\x33\x31\x45\x61\xf4\x7e\xa5\x53\x99\xb9\x6e\xd9\x14\x92\xde\xa6\xb7\x46\x29\xb4\x5d\x84\x2b\xf9\x84\x84\xf0\x52\x42\xd4\x26\x87\x8d\xc4\x80\x31\xcd\x0b\x64\x6c\x4c\xc8\xec\x2e\xbe\x9c\x5f\xc7\x8b\xf3\x59\xbc\x58\x5e\xb3\xcb\xf9\xec\xfb\x7c\x05\x11\x8c\x66\x95\xcf\x51\x7b\x99\x70\x2f\x8d\x1e\x91\xf3\xe5\x75\xbc\x5a\x5e\x5d\xcd\x57\xec\x76\xbe\xfa\xb1\x38\x9f\xb3\x9b\xe5\x2a\x86\x08\xce\xa6\xd3\x29\x21\x44\x60\x0a\x49\x8e\xc9\x9a\xf1\x83\xd2\x60\xfc\x95\x00\x00\xc8\x14\x5e\x27\x93\xba\xeb\x3a\xcc\x91\x0b\xb4\xae\x2d\xa8\xbf\x1a\x8a\xb5\x51\x88\x86\x69\xf7\xaf\xe2\x3d\xec\x8a\x65\x0a\xda\x74\x67\x18\x66\xe8\x99\xcb\xf9\xe9\xd9\xe7\xa0\x87\x3a\x86\x28\x02\x87\xf6\x49\x26\x78\xc3\x9d\xdb\x18\x2b\xf6\xf4\xf5\xb7\x1d\x56\x28\x75\x6a\x02\xba\x4d\x85\x84\x2b\x85\x02\x36\xd2\xe7\xb0\xb1\x46\x67\x50\x76\xd5\x40\xe1\xff\x3e\xc3\x01\x9a\x45\x5f\x59\x0d\x17\x5c\x39\x24\x83\x60\x6c\xab\x36\x76\x90\x44\xc8\x37\x5e\xca\xd0\x9a\xca\x63\x40\x4f\x5c\x62\x11\xb5\xcb\x8d\xa7\xe3\xe6\xcc\x9b\xbe\x76\xc1\xde\x69\x37\xbd\xbf\x33\x90\x1e\x13\xbd\xd3\x75\x8e\xb1\xf2\x17\x0a\x3a\x81\x4f\xd3\x0f\x7d\x21\x7b\x6b\x85\x43\xb6\x09\x9c\x36\xd3\x3f\xd0\x88\xcf\x98\x54\x1e\xe9\x04\x0a\xf4\xb9\x11\x2e\xba\xa7\x37\xcb\xdb\x98\x3e\xb4\x92\xb7\xfb\xac\x9e\x0c\xd7\xe2\x5f\x6b\x1e\xd2\x75\x36\x12\xdc\xf3\x50\x60\x62\x04\x06\xb4\xf2\xe9\xf1\x17\x3a\xde\x35\x24\x53\xe8\xae\x49\x6d\x91\x11\x63\x05\x97\x9a\xb1\x51\x2b\x24\x53\xe6\x91\x2b\x58\x4b\xe3\xd6\x0b\x31\x69\x2c\x84\xb6\x73\xd0\x64\x68\xa9\x83\xfe\xda\x5b\x1c\xb6\xff\x2c\x95\x0a\x19\x3e\x4b\xe7\x5d\xbf\xcb\x3f\x45\x86\x68\x0f\xc8\x95\x62\x89\x45\xee\x91\xb5\x07\x1f\xbc\x71\x6b\x5b\x4f\xa2\x72\xf8\x57\x84\xca\x70\xc1\xb6\x0b\x56\xbf\x65\x4d\x33\x41\x8b\xde\xbc\x3e\xa1\xf3\xdc\x7a\xe6\x3c\xf7\x95\x63\x55\x29\x6a\x6d\x1b\x63\xd7\x68\x83\x21\xcf\xbb\x5a\x1b\x7b\x55\x3a\xc8\x8d\xf3\x11\x9d\x86\xcd\x8f\x4e\xa0\x7e\xe8\xa2\x37\x2b\x7f\x07\x00\x00\xff\xff\x40\x9d\xe7\xf7\xc6\x05\x00\x00")

func kioskWorkerMainPyBytes() ([]byte, error) {
	return bindataRead(
		_kioskWorkerMainPy,
		"kiosk-worker/main.py",
	)
}

func kioskWorkerMainPy() (*asset, error) {
	bytes, err := kioskWorkerMainPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-worker/main.py", size: 1478, mode: os.FileMode(436), modTime: time.Unix(1624471146, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kiosk-worker/alive.py":       kioskWorkerAlivePy,
	"kiosk-worker/common.py":      kioskWorkerCommonPy,
	"kiosk-worker/configs.py":     kioskWorkerConfigsPy,
	"kiosk-worker/controller.py":  kioskWorkerControllerPy,
	"kiosk-worker/ip_provider.py": kioskWorkerIp_providerPy,
	"kiosk-worker/main.py":        kioskWorkerMainPy,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"kiosk-worker": &bintree{nil, map[string]*bintree{
		"alive.py":       &bintree{kioskWorkerAlivePy, map[string]*bintree{}},
		"common.py":      &bintree{kioskWorkerCommonPy, map[string]*bintree{}},
		"configs.py":     &bintree{kioskWorkerConfigsPy, map[string]*bintree{}},
		"controller.py":  &bintree{kioskWorkerControllerPy, map[string]*bintree{}},
		"ip_provider.py": &bintree{kioskWorkerIp_providerPy, map[string]*bintree{}},
		"main.py":        &bintree{kioskWorkerMainPy, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
