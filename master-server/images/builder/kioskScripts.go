// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// kiosk-image/Makefile
// kiosk-image/chroot_commands
// kiosk-image/create_custom_image
// kiosk-image/download_ubuntu_image
// kiosk-image/prepare_kiosk
package builder

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kioskImageMakefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4d\x8b\xf2\x30\x10\x80\xcf\xcd\xaf\x18\x4a\x4f\x2f\xb4\x8a\xc8\x7b\x28\x08\xd6\x6e\x59\x8b\xf6\x03\xdb\x2e\x2c\x08\xa1\xa6\x51\x83\xa6\x29\x49\xe3\xc5\xf5\xbf\x2f\xc6\x2e\xec\x41\x59\xc8\x69\x66\x9e\x79\x26\x33\x68\x11\x14\x11\xae\x16\x55\x5a\x56\x38\x4e\x82\xf7\x08\xa7\x41\x12\xcd\xf4\x4e\xb7\xbd\x76\x27\x63\x6f\x3c\xf5\x26\xee\x99\x5d\xa8\xab\xa8\xbc\x50\xe9\xd6\xbc\xf9\x3f\xf5\x98\x12\x4f\xd8\x8f\x68\x53\xc4\x59\x3a\x1b\x38\x84\x76\x9a\x9d\x1b\x1f\x18\xaf\x0f\x54\x8d\x9c\xeb\x73\xdd\x0d\xc8\x51\x0a\xd1\x63\x22\x38\xaf\xdb\x46\x01\x91\xb4\xee\x29\x26\x5a\xf5\x82\x63\x83\x43\x27\x69\x57\x4b\x8a\x4f\x4c\xa8\x13\xb2\x2c\xcb\x9a\x53\x72\x14\x60\x1c\xac\x3d\x80\x49\x3c\x5c\xb0\x97\x82\xc3\x4b\x9f\xa1\x0d\xec\x8d\x9e\xa9\x5e\x0f\xea\x5c\x57\x71\x56\xac\x86\x58\xfc\x76\x8f\xac\xb3\x30\x58\xe3\x24\x08\x97\x71\xfa\xab\x24\xc8\xf3\x01\xb2\xb7\xb6\x73\x0d\xab\xa2\xcc\x12\x5c\x84\x9b\x38\x2f\x0b\x5c\x66\x78\x53\xa5\xb7\xad\x6d\xc3\x17\x28\xdd\x08\x50\xda\x8c\x25\x39\xb8\x72\x3f\xac\x0c\x21\x72\xa6\x75\xeb\x23\xcb\x94\x0c\x39\xf3\x63\x84\xfe\xda\xaa\x8f\x2c\x7e\x6a\x98\x04\xb7\xfb\x69\x67\x91\x0e\x3c\x6f\xf4\x78\xff\xee\x57\x04\x67\x8e\x90\x97\x2f\xb3\xf4\xd3\x1f\x1a\x7f\x07\x00\x00\xff\xff\x8c\x0f\x15\xcb\x15\x02\x00\x00")

func kioskImageMakefileBytes() ([]byte, error) {
	return bindataRead(
		_kioskImageMakefile,
		"kiosk-image/Makefile",
	)
}

func kioskImageMakefile() (*asset, error) {
	bytes, err := kioskImageMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-image/Makefile", size: 533, mode: os.FileMode(436), modTime: time.Unix(1624202963, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskImageChroot_commands = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xcb\x6e\xdb\x3a\x10\x86\xf7\x7c\x8a\x39\xc9\x59\xb5\x60\xd8\xeb\x32\x05\x04\x45\x68\x84\xd8\xb1\x61\x39\xdd\x12\x34\x45\xd9\x84\xc5\x0b\x86\xa4\x6a\xa3\x49\x9f\xbd\x90\x62\xd9\xb1\x81\xec\x66\xe6\x1b\x69\x84\x4f\xff\xf5\x7f\x6c\xa5\x2d\x5b\x89\xb0\x21\x6a\xe7\x1d\x46\xa8\x8a\xc5\xaf\x62\xc1\xcb\x39\xcf\xee\xee\x16\x45\x55\xdd\x5e\xfd\xff\xe7\xf3\xcb\xd5\xc8\x1f\xca\x59\xf5\xc0\xcb\x69\xf6\xb3\xe0\xe5\x5d\x0f\xbf\x9c\xe0\x64\x96\x67\x13\x3e\xcd\xf2\xfb\xf2\xb1\xe8\xd9\xd7\xcb\x07\xb3\xf9\x9c\x3f\x66\xd3\x01\x7e\x3b\xc1\xfc\xa9\x5a\xce\xa6\xbc\xca\x17\xe5\x7c\x59\xf1\xe5\x8c\x2f\x9e\x1e\xfb\x9d\xef\x2f\x57\xc4\xb8\x64\x23\xd0\x08\x1e\x9d\x04\xeb\xac\x02\xd6\x97\x27\x10\xf6\xa1\x09\x07\x12\xf6\xe1\x04\x6a\xd5\xf9\x38\x92\x5a\x75\xcc\xc7\x30\xde\xbc\x9f\x4d\x8b\x5b\x86\xce\xc5\xe3\xe7\xe7\x3c\x9b\x4c\x6e\x73\x52\xaf\x52\xa0\x29\xe9\x7a\xad\x2c\xfc\x00\xd6\x09\x64\xad\x5e\xb1\x7e\xce\x8c\x90\x1b\x6d\x15\xd5\x35\xa9\xfd\x76\x4d\x6b\xdd\x29\x8c\x40\x69\xeb\xa4\x68\x81\x52\x54\x56\x18\x05\x94\x8a\xba\x06\x16\x7a\xc3\xda\xea\x28\x63\x4b\x5a\x0b\x34\xc0\x20\x3d\x62\x52\x17\x54\x7a\xa0\x08\xec\xb7\xc3\x6d\xf0\x42\x2a\xb6\xd5\x2e\x6c\x69\xdf\x2b\x04\x96\x02\xb2\xe1\xc6\xd9\x9c\x90\x6b\x4c\xd6\x6a\xbb\x06\xe9\x8c\x11\xb6\x0e\xd0\x38\x84\xd7\x1d\x6d\xc4\x5a\x81\x44\x25\xa2\x76\x16\x1a\x74\x06\x94\xf1\x71\x0f\x69\x95\x6c\x4c\x44\x6e\x8c\xab\xe1\xe3\xee\xed\x59\x8f\xca\x0b\x54\x7c\x78\x05\xb9\x79\x1f\x11\xe1\x23\xc8\x56\x09\x4b\xd0\x00\xc5\x06\x58\x34\x9e\x7d\x80\xbf\xec\xa6\x0f\x15\xdf\xe8\x10\x1d\xee\x7b\xca\x54\x94\x0c\x55\x70\x6d\x77\x23\x9d\x6d\x86\xd9\x7b\x62\x7b\x76\xa6\xe6\xdc\xf4\xd1\x30\x2a\xe3\xba\x4b\x8d\xe9\xf5\xf7\x0f\x19\x81\xe7\x67\x38\xf4\xb4\x6d\x0e\xb9\x19\x17\xfa\xa8\x8c\xf5\x18\x8e\x37\xfd\xb1\xc6\x64\x89\xda\xe9\x08\x9f\xfe\x05\x00\x00\xff\xff\x75\x9b\x53\xa7\x31\x03\x00\x00")

func kioskImageChroot_commandsBytes() ([]byte, error) {
	return bindataRead(
		_kioskImageChroot_commands,
		"kiosk-image/chroot_commands",
	)
}

func kioskImageChroot_commands() (*asset, error) {
	bytes, err := kioskImageChroot_commandsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-image/chroot_commands", size: 817, mode: os.FileMode(509), modTime: time.Unix(1624284067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskImageCreate_custom_image = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x6d\x6f\x22\x37\x10\xfe\xce\xaf\x98\xc2\x2a\xb9\x53\xe5\xdd\x24\xcd\xb5\x55\x25\x4e\xa2\x80\x5a\x7a\x97\x0b\x0a\x77\xd7\x2f\x27\x21\x63\x7b\xc1\xc2\xeb\xd9\xf3\x0b\x81\x90\xfc\xf7\xca\xde\x25\x40\x40\x69\xda\x7c\x41\x78\xe6\x99\xc7\xf3\xe6\x99\x6d\xfd\x90\x4d\xa4\xce\xec\xac\xd1\x1a\x31\x23\x4b\x07\xd2\x42\x41\xb9\x80\xdc\x60\x01\x1c\x99\x2f\x84\x76\xd4\x49\xd4\x30\x73\xae\xb4\xbf\x65\xd9\x4c\xa8\x32\xf5\x13\xaf\x9d\x4f\x19\x16\x19\xc3\xa2\xf0\x5a\xba\x55\xf6\x51\x2e\x44\xb7\xd7\xf5\xd6\x61\x21\xef\xa2\x55\xa3\xe5\x90\x23\xdc\xd1\x3b\x0a\x39\x1a\x50\xc8\xa8\x02\x2b\x1c\xb0\x08\x83\x51\xff\xe6\x6b\xff\x66\x3c\x18\x8e\x3b\xbd\xde\x4d\x7f\x34\x6a\x08\x36\x43\x68\x32\x23\xa8\x13\x1b\x94\x2c\xe8\x54\x34\xe1\xe4\x04\xbe\x35\xac\xe7\x08\x34\xf8\xaa\xad\xa3\x4a\x01\x59\x01\xf3\x46\x55\xda\x03\xbe\x76\x33\x79\x13\xd5\x1b\xff\x69\x29\x53\x59\xca\x7c\x95\xa2\x99\x66\x70\xf1\x3e\xe3\x62\x91\x69\xaf\xd4\xdb\xfa\x86\xdf\x3b\xa3\xfe\x78\x70\xd5\xf9\xa3\x3f\xfe\xd4\xb9\xea\xb7\x93\x73\x38\x39\xf9\xd6\xf8\x30\xb8\x1e\x7d\xa8\xe5\x83\x5e\xbb\x99\xac\x2f\x1e\x9a\x51\xf3\xf1\xba\xdb\xf9\x38\xbe\xea\x74\xff\x1c\x7c\xea\x07\xc5\x4f\xb5\xa2\x32\xe9\x0c\x87\x15\x51\x33\x59\x5f\xd6\x9a\xee\x97\xd1\xe7\xeb\xab\xf1\xa8\x7b\x33\x18\x7e\x1e\x8d\x3f\x5f\x8f\x6f\xbe\x7c\x0a\x80\x77\x35\x60\xe7\xfe\x0f\x12\xed\x3c\x0a\x8f\xc5\x6e\xbf\x7b\x6a\x67\xb9\x25\x0e\x51\x59\x98\x0a\x2d\x2d\xc6\x84\x45\x93\x62\xce\xa5\x81\x89\x97\x8a\xc7\x33\xe3\x3b\x87\x4a\x49\x4a\x28\xb4\xdb\x17\x88\xa5\x33\x94\x39\xc2\x2a\xa0\x65\x25\xa4\x69\x16\x69\x6d\x96\xac\x9f\xa4\xe8\x01\xd2\xad\x7f\x05\x7a\xed\x80\x20\x28\xc4\x12\x8e\x60\x37\x97\x45\xb4\xb1\x2b\xcd\x80\x10\xb1\x64\xca\x73\xd1\xce\x18\xb5\xa5\x30\x59\x2e\x95\xb0\x2b\xeb\x44\x91\x6e\x22\x04\x42\x83\x6d\x76\xe0\x5c\xe0\xf1\xfa\x11\x16\x30\xcf\xb0\x6c\x1d\x5d\x6c\x93\x67\x10\x1d\x08\x2e\x77\x3c\x63\x25\x64\xc2\xb1\xcc\x08\x8b\x6a\x91\x32\xd4\x79\x44\x44\xe1\x91\x70\x27\x52\x73\xc8\x8c\xd7\x59\x05\x33\x5e\x1f\xa0\x48\x05\x0a\x1d\x57\x81\xb8\x58\xec\x80\x62\xf6\xa3\xfc\x16\xcd\xdc\x96\x94\x89\xe7\xb5\xd9\x3c\xf4\x06\x09\x67\x61\x76\x2b\x55\x1a\x51\x52\x23\xc6\x51\x7f\x94\xb2\xc2\xb1\x59\x88\x7c\x1c\x1e\x31\xd5\xdc\x3e\x83\x4c\xd3\xbd\xcb\xe2\xbb\x47\x9d\x96\xab\x97\xba\x74\x48\xa0\x73\x39\xb5\xaf\x63\x70\x06\x95\x12\xe6\x15\x24\xb2\x1c\x97\x06\x17\x92\xbf\x8a\xa5\xa0\xf2\x65\xb9\x88\x9d\x35\x2b\x90\xc3\x8f\xb7\x3b\x8d\x7c\xa4\x61\x0b\xaa\x65\x2e\xec\x6e\x47\xce\xb6\x6d\xba\x73\xc9\xd3\x1a\x26\xeb\x83\x29\xf8\x00\xc9\x7a\x7f\x7e\x05\xc9\xde\xdc\xda\x42\x36\xf3\xea\x01\x9a\xc9\xfa\xe8\xa0\xaa\x67\x54\x1c\xd5\x43\x83\xdc\x33\xa9\xa7\xe0\x66\x02\xba\x3d\xd8\xce\x9e\x46\x2b\xba\x6d\x7d\x3c\xb5\x0e\x62\xe0\xe5\x7c\x4a\xbe\x7b\x61\x56\x40\xfe\x06\x42\xec\x0c\x6f\x73\x34\x05\x75\xed\xd3\x64\x3d\xa4\x6c\x4e\xa7\x22\xf8\xf5\x55\x18\x2b\x51\x3f\x7c\xd3\xa7\xf0\xfe\x3f\x64\xad\x25\x96\x4f\x5e\xf4\xcb\x6c\x5f\x84\x22\x5c\xd8\xb9\xc3\x72\xcb\x6f\x05\x07\x22\xe1\x34\xf3\x13\xf9\xdd\x87\x95\xc8\x4f\x5f\xcd\x55\x1b\xfd\x2f\xa6\x58\xa0\x2e\x16\xa5\x11\x36\x24\x70\x77\x98\x3c\xce\xc3\x58\x8a\x67\xb9\xb7\x03\x78\x02\xe7\x67\x97\xbf\xbe\xfb\xe5\xe7\xc8\x54\x1a\xa9\x5d\x0e\xc9\x1b\xee\x81\xd8\x65\x18\x6f\x0a\xd9\x9c\x58\x79\x27\xda\xe7\x15\xf1\x3d\x30\xef\x80\xe4\xe7\x6f\xff\xad\x72\xc1\x6a\xeb\x35\x2a\x0e\x05\x7f\x67\x7d\x91\xba\xa5\x03\xaa\x39\x30\xaa\x98\x57\xe1\xb3\x40\x8b\xdb\xa0\x04\xeb\x0b\xbb\xd9\x6a\xc7\x96\x82\x29\x76\x39\x82\x38\x0f\xf3\x97\xb8\x55\x29\x20\x07\x12\x03\x38\x83\x7b\x88\xe8\x25\x35\x53\x0b\xe4\xac\xb6\x81\x7b\x98\x1a\x51\x02\x59\x80\xb4\xa8\xa4\xf6\xcb\x6c\x82\xe8\x52\x46\xdd\xc6\xc4\x09\xf1\xf4\x86\xe8\x7d\x78\x0a\x83\xd1\xf5\xce\x5b\xa8\xb3\x2e\x2d\x86\x3c\xf6\x80\x18\x20\x5f\xa1\x99\x6c\x17\x63\x13\x08\xa3\x6c\x26\x88\xd4\xc8\x85\x05\xf2\x17\x10\x15\x52\xfe\x78\xfb\xe6\x4f\x3a\x91\x1a\x08\x3b\xe2\x16\xd1\x48\x44\xe1\x15\x09\x12\x88\xbf\x44\x21\xe5\xb1\x24\x70\x59\x4b\xa4\xce\x91\x38\x3a\x51\x22\xec\xad\x34\xcd\xaa\xcf\x39\x72\x71\x96\x9e\x5d\xa6\x17\xc4\x0a\xb3\x10\x86\x54\x1f\x5f\xa9\xb4\x58\xaf\x77\xc6\x21\x4d\x1b\xbe\xda\x65\x9b\x2d\x6e\x8a\x10\xcb\xde\x29\xdf\x6e\xd2\xcd\x79\xbf\x38\xb5\x74\x7f\xcf\xd4\xc2\xe4\xc9\xf7\xc2\x3f\x01\x00\x00\xff\xff\x4e\x7c\xc5\x8d\xa5\x0a\x00\x00")

func kioskImageCreate_custom_imageBytes() ([]byte, error) {
	return bindataRead(
		_kioskImageCreate_custom_image,
		"kiosk-image/create_custom_image",
	)
}

func kioskImageCreate_custom_image() (*asset, error) {
	bytes, err := kioskImageCreate_custom_imageBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-image/create_custom_image", size: 2725, mode: os.FileMode(509), modTime: time.Unix(1624202963, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskImageDownload_ubuntu_image = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\xbd\xca\x83\x30\x18\x46\x77\xaf\x22\x9f\x9f\x6b\x12\x11\xe9\x50\xb0\xa0\x10\x8a\x83\x16\x6a\xed\x2a\x6a\x53\x14\xd4\xc8\x9b\x37\x52\x28\xde\x7b\xe9\x8f\x9b\xae\xcf\xe1\xe1\x9c\xff\x3f\x5e\xb5\x03\xaf\x4a\xdd\x58\x51\x98\x89\x22\x8f\xf2\xf4\x92\x17\x71\x12\x1e\x45\x91\x86\x89\x08\x4c\x65\x06\x34\xd4\x73\x99\xeb\x33\x8f\x76\xed\x24\xa9\x96\x30\x49\xa0\x65\x7f\xdb\xf9\xac\xd5\x6a\xe5\x7b\x15\xe7\x2c\x3e\xa5\xc1\xef\x67\x41\x4f\x28\xdc\x89\xb3\x6e\x59\xb0\x32\x38\x1a\x64\xf8\xc0\x65\x91\x00\x0a\x3e\x43\x6d\xa0\x23\x76\x83\x38\xea\x3d\xe7\x20\x3b\x59\x6a\xa9\xd9\xb7\x8f\xd5\xaa\xe7\xce\x73\xb3\x63\x5e\x85\x6f\xf5\x6c\x93\x03\xb1\xb7\xe9\x2b\x00\x00\xff\xff\x34\xc0\x38\x19\x23\x01\x00\x00")

func kioskImageDownload_ubuntu_imageBytes() ([]byte, error) {
	return bindataRead(
		_kioskImageDownload_ubuntu_image,
		"kiosk-image/download_ubuntu_image",
	)
}

func kioskImageDownload_ubuntu_image() (*asset, error) {
	bytes, err := kioskImageDownload_ubuntu_imageBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-image/download_ubuntu_image", size: 291, mode: os.FileMode(509), modTime: time.Unix(1624048253, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskImagePrepare_kiosk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x5f\x6f\xdb\xb6\x17\x7d\xd7\xa7\xe0\xcf\x3f\xd7\x48\x1e\x18\xc6\xc8\xd6\x0e\x45\x15\x4c\xb3\xd5\x56\x88\x1d\x1b\x96\xb3\x76\xa8\x03\x81\x91\x6e\x6c\x22\x14\xa9\x91\x94\x1d\x25\xee\x77\x1f\x24\x59\xb3\x9c\xc8\x4e\xd6\x01\x7b\xb1\x45\xde\xc3\xfb\xf7\xdc\xf3\xff\xff\x91\x1b\x26\xc8\x0d\xd5\x0b\x4b\xa7\x91\x44\x34\x31\x28\x4d\x22\x6a\x00\x75\x3a\x68\xb6\xbd\x64\x42\x1b\xca\x39\xc2\x19\xe2\xec\x06\xe6\xbc\x8b\x63\xd0\xb4\x3a\xec\x47\xdf\xaf\x68\xc6\xa9\x88\x0e\x20\x22\x69\xa4\xe4\xfb\x01\x31\x13\x73\x30\x26\xdb\x8f\xd0\xa1\x92\xe6\x80\x19\x0e\x84\x4f\x32\xb3\x90\xe2\x0c\x27\x2c\xa9\x81\xf2\x53\x05\x52\xf0\x67\x0a\xda\xe8\x3d\xe6\x8f\x9c\xea\xbb\x9a\x2d\xbe\x8b\x98\x42\x04\x4c\x48\x74\xa6\x0d\xc4\xd1\xe6\x9f\x14\x55\xfc\x6a\x4c\xd6\x3d\xd1\xa0\x96\x2c\x84\x93\x7a\x62\xa9\x06\x45\xa3\x08\xe1\x18\xe1\x4f\xa8\xb8\xc2\x58\x2f\x80\x73\xf4\xf7\x98\xd0\x1d\x93\x3b\xd1\x12\xaa\xf5\x2a\x2a\xaf\x3f\x7c\x70\x47\x1f\xad\x87\xee\xd9\x03\xb9\xc8\xcf\xf5\xcf\xdc\x52\x3c\x80\x70\x21\x11\x06\x81\x5a\x33\x31\x13\xa5\x3b\x67\x30\xb0\x8f\x9c\xc1\xe0\x18\x5d\x8e\xc6\x8e\xef\x7f\xe9\xbf\xcf\xef\x5a\xe7\xe7\x65\x19\x69\x24\x41\xd5\xeb\x0f\xa9\x41\xe7\xaf\x2d\x91\xc8\x25\x28\xc5\x22\x38\x09\xa5\xb8\x45\x65\x96\xdf\xfc\xd2\x7c\x6d\xb9\xf7\x10\xfa\x86\x2a\x63\xd7\x3e\x31\xd1\x79\xc9\xb4\x1c\x3c\xc6\x42\x32\xad\x53\x40\x18\xd3\xd4\x48\x2e\xe7\x4c\x6c\x5a\xf1\xc6\x43\xb3\xf6\xd4\x9d\x0c\xad\x69\x96\x80\xcd\x22\x0e\xdb\x62\xf7\xe6\x59\xbc\xad\x52\xdc\x64\x74\x25\x98\xb9\xb6\xfa\xa0\x43\xc5\x12\xc3\xa4\xb0\x87\x32\x15\x06\xa5\x82\x19\x54\x76\xd1\xb9\x35\xa0\x6c\x2d\x68\x12\x55\x8f\xad\xc6\x52\x48\xaa\x15\xe1\x32\xa4\xbc\x18\xdd\x26\xdc\xc2\x72\xc5\x92\x29\x29\x62\x10\xc6\xbe\xf0\x46\xfe\x45\xe0\x8c\xc7\xc1\xa5\x33\x74\x6d\x67\x3c\x1e\x78\x3d\x67\xea\x8d\x2e\x8b\x8b\x60\x3c\x70\x7a\xee\xe7\xd1\xa0\xef\x4e\xac\x2b\x0d\xca\x2e\xbc\x58\x13\xd0\x45\x08\xca\x57\x34\xd3\xd5\xd1\x87\xd0\x3e\xb3\xac\x6f\x5e\xc9\xca\x6b\xeb\x0b\x15\x06\xa2\xdf\x32\x3b\x82\x5b\x9a\x72\x73\x62\xa8\x9a\x83\xd9\xf6\x26\xdf\x0a\xcc\x50\x4b\xaf\x0f\x45\x5e\xb7\x1f\x77\xf3\xfc\xbe\x9e\xb7\x1a\xd9\xbd\xd3\xd2\x3a\x57\x16\xb1\x8c\xd0\xdb\xb7\x3f\xfd\xb3\x57\xc5\xe4\x9a\xbb\x58\xce\xab\x2e\x5e\xbd\x2b\x7f\x3a\x1a\x06\x7e\x6f\xe2\x8d\xa7\x7e\x30\x1d\x05\x93\xab\xcb\x7a\x19\x1b\xcf\x60\xf2\xed\xea\x74\x10\xdc\x27\x52\x19\xf4\xb5\xff\x29\x47\x4e\xbd\xa1\x1b\xf4\xbd\x89\x4d\x54\x2a\x48\xbe\x87\xa4\x7b\x7a\x7a\x9a\x03\x35\x07\x48\x50\xf7\xac\x74\x70\x54\x76\x4e\xd0\x04\xcd\xc1\xa0\x98\x29\xbc\x59\xc8\x73\x12\xc1\x92\x88\x94\x73\xb4\x5e\xa3\x2d\xac\x52\x89\x2d\x14\xe3\x08\x96\xb1\x8c\xe0\x78\xe3\x93\xe4\xc0\xa2\x96\x66\x7f\x9d\xe3\x6d\x22\xbf\xd4\x92\xef\x7b\xfe\x78\xe0\xfc\x61\xbf\xdf\xc8\xef\xd1\xd7\x4a\x6b\xf1\x4a\xa1\x59\x7b\x63\xdf\xef\xcb\x2a\xb4\xa0\x55\xf0\x87\x89\x39\x9a\x3d\x9b\x75\xcb\x3a\xaa\x37\xa0\x92\xea\x15\x13\x91\x5c\x69\xf6\x00\x68\xd6\x3e\xaa\x6e\x35\x50\x15\x2e\x10\xc6\x52\xf0\x6c\xc9\x34\xbb\xe1\xf9\xc2\x0a\x1a\x43\x83\xeb\x63\xd4\x3d\x3d\x7d\x53\xfc\x1c\xa3\x8e\xf5\x1c\xd0\xc4\xd4\x17\xe7\xbc\x6e\x3f\x36\x62\x4a\xd6\x36\xd3\xe9\x19\x57\xdf\xbd\x7b\xf7\x0a\x6c\x49\xe0\xd0\x70\x04\x82\xe6\xa5\x1e\xa6\xf2\x3e\xee\x07\x2b\xa9\xee\x40\xfd\x37\x5a\x54\x44\xc4\x65\x44\x12\x53\x26\x4e\x92\xac\x41\x93\x7c\x77\xf2\xbb\x3b\xd9\x39\xec\xa8\xd1\xf3\x17\xde\xd0\xf9\xe4\x06\x5e\xff\xc9\x71\xef\xab\xc1\xa8\xe7\x0c\x82\xa1\xd3\xfb\xec\x5d\xba\xbb\xa7\xe7\xba\xa7\xa4\x34\x07\x64\xef\xe7\x1f\x93\x3d\xb2\xaf\x3c\xd2\x7e\xdc\x5c\x7a\xe3\xc0\xe9\xf7\x27\xae\xef\x7f\x27\x87\x54\xef\xc9\x0c\xeb\x24\x79\x12\xad\xa9\x31\xa4\xa2\x7e\x65\xfc\xf7\xc1\xf6\x36\x94\xb4\x1f\x77\x6c\x3f\x1a\xea\x15\xa2\xfe\xd2\xe3\x27\x5b\xd6\x44\xcd\x17\xb7\xed\x49\x0c\xcb\xfa\x2b\x00\x00\xff\xff\x9c\xe8\xa9\xac\xd2\x0a\x00\x00")

func kioskImagePrepare_kioskBytes() ([]byte, error) {
	return bindataRead(
		_kioskImagePrepare_kiosk,
		"kiosk-image/prepare_kiosk",
	)
}

func kioskImagePrepare_kiosk() (*asset, error) {
	bytes, err := kioskImagePrepare_kioskBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-image/prepare_kiosk", size: 2770, mode: os.FileMode(509), modTime: time.Unix(1624288154, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kiosk-image/Makefile":              kioskImageMakefile,
	"kiosk-image/chroot_commands":       kioskImageChroot_commands,
	"kiosk-image/create_custom_image":   kioskImageCreate_custom_image,
	"kiosk-image/download_ubuntu_image": kioskImageDownload_ubuntu_image,
	"kiosk-image/prepare_kiosk":         kioskImagePrepare_kiosk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"kiosk-image": &bintree{nil, map[string]*bintree{
		"Makefile":              &bintree{kioskImageMakefile, map[string]*bintree{}},
		"chroot_commands":       &bintree{kioskImageChroot_commands, map[string]*bintree{}},
		"create_custom_image":   &bintree{kioskImageCreate_custom_image, map[string]*bintree{}},
		"download_ubuntu_image": &bintree{kioskImageDownload_ubuntu_image, map[string]*bintree{}},
		"prepare_kiosk":         &bintree{kioskImagePrepare_kiosk, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
