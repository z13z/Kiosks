// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// kiosk-image/Makefile
// kiosk-image/chroot_commands
// kiosk-image/create_custom_image
// kiosk-image/download_ubuntu_image
// kiosk-image/prepare_kiosk
package builder

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kioskImageMakefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xdd\x6b\xc2\x30\x10\x7f\x6e\xfe\x8a\xa3\xf4\x69\xa3\x55\x44\xf6\x50\x10\xac\x5d\x99\x45\xfb\x81\x6d\x07\x03\x21\xd4\x34\x6a\xd1\x34\x25\x69\x65\xe0\xfc\xdf\x87\xb1\x83\x7d\x54\x06\x79\xba\xbb\xdf\xd7\x5d\xd0\xcc\x49\x3c\x9c\xcd\xb2\x30\xcd\xb0\x1f\x38\x2f\x1e\x0e\x9d\xc0\x9b\xb4\x9b\xb6\x6a\x5a\x73\x34\xb4\x86\x63\x6b\x64\x1e\xcb\x13\x35\x25\x15\x27\x2a\xcc\x9c\x15\x4f\x63\xab\x94\xbc\x07\xfb\xea\xad\x12\x3f\x0a\x27\x1d\x0e\xa1\x4d\x5b\x1e\x0b\x1b\x4a\x96\xef\xa8\x1c\x18\xe7\x7e\xb9\x0b\x90\xbd\xe0\xbc\xc1\x84\x33\x96\x57\x85\x04\x22\x68\xde\x50\x4c\x5a\xd9\x70\x86\x15\x1c\x6a\x41\xeb\x5c\x50\x7c\x28\xb9\x3c\x20\x4d\xd3\xb4\x29\x25\x7b\x0e\x4a\xa3\xac\x76\xa0\x1a\x37\x2d\xd8\x0a\xce\xe0\xae\x9e\x42\xcb\xb6\xe0\x40\xf6\x8c\x17\xf0\xf8\xde\xa7\xd8\x33\xf5\xd7\xc3\x2f\x96\x9f\x39\xd4\x84\x32\x69\x0d\xfa\x22\xdd\x5f\x88\x71\x5e\xf8\x51\xb2\xe8\x6a\xfe\xf3\xb5\xb2\x8c\x5c\x67\x89\x03\xc7\x9d\xfb\xe1\xb7\x11\x27\x8e\x3b\x90\xbe\xd6\x8d\xb3\x9b\x25\x69\x14\xe0\xc4\x5d\xf9\x71\x9a\xe0\x34\xc2\xab\x2c\xbc\xac\x75\x1d\x3e\x40\x99\x95\xad\xb2\x25\x18\x98\x62\xdb\x9d\x06\x21\x72\xa4\x79\x65\xa3\x5b\x9e\xae\xa7\x36\x8b\xd0\x7f\xd7\xb3\x91\xc6\x0e\x45\x29\xc0\xac\xbf\xe8\x34\x52\x83\x65\x0d\x6e\xef\xe1\xfa\x5b\xc0\x98\x22\x64\xc5\xf3\x28\x7c\xb3\x3b\xe2\xcf\x00\x00\x00\xff\xff\x15\xda\x10\x3c\x7d\x02\x00\x00")

func kioskImageMakefileBytes() ([]byte, error) {
	return bindataRead(
		_kioskImageMakefile,
		"kiosk-image/Makefile",
	)
}

func kioskImageMakefile() (*asset, error) {
	bytes, err := kioskImageMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-image/Makefile", size: 637, mode: os.FileMode(436), modTime: time.Unix(1624454811, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskImageChroot_commands = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xcb\x6e\xdb\x3a\x10\x86\xf7\x7c\x8a\x39\xc9\x59\xb5\x60\xd8\xeb\x32\x05\x04\x45\x68\x84\xd8\xb1\x61\x39\xdd\x12\x34\x45\xd9\x84\xc5\x0b\x86\xa4\x6a\xa3\x49\x9f\xbd\x90\x62\xd9\xb1\x81\xec\x66\xe6\x1b\x69\x84\x4f\xff\xf5\x7f\x6c\xa5\x2d\x5b\x89\xb0\x21\x6a\xe7\x1d\x46\xa8\x8a\xc5\xaf\x62\xc1\xcb\x39\xcf\xee\xee\x16\x45\x55\xdd\x5e\xfd\xff\xe7\xf3\xcb\xd5\xc8\x1f\xca\x59\xf5\xc0\xcb\x69\xf6\xb3\xe0\xe5\x5d\x0f\xbf\x9c\xe0\x64\x96\x67\x13\x3e\xcd\xf2\xfb\xf2\xb1\xe8\xd9\xd7\xcb\x07\xb3\xf9\x9c\x3f\x66\xd3\x01\x7e\x3b\xc1\xfc\xa9\x5a\xce\xa6\xbc\xca\x17\xe5\x7c\x59\xf1\xe5\x8c\x2f\x9e\x1e\xfb\x9d\xef\x2f\x57\xc4\xb8\x64\x23\xd0\x08\x1e\x9d\x04\xeb\xac\x02\xd6\x97\x27\x10\xf6\xa1\x09\x07\x12\xf6\xe1\x04\x6a\xd5\xf9\x38\x92\x5a\x75\xcc\xc7\x30\xde\xbc\x9f\x4d\x8b\x5b\x86\xce\xc5\xe3\xe7\xe7\x3c\x9b\x4c\x6e\x73\x52\xaf\x52\xa0\x29\xe9\x7a\xad\x2c\xfc\x00\xd6\x09\x64\xad\x5e\xb1\x7e\xce\x8c\x90\x1b\x6d\x15\xd5\x35\xa9\xfd\x76\x4d\x6b\xdd\x29\x8c\x40\x69\xeb\xa4\x68\x81\x52\x54\x56\x18\x05\x94\x8a\xba\x06\x16\x7a\xc3\xda\xea\x28\x63\x4b\x5a\x0b\x34\xc0\x20\x3d\x62\x52\x17\x54\x7a\xa0\x08\xec\xb7\xc3\x6d\xf0\x42\x2a\xb6\xd5\x2e\x6c\x69\xdf\x2b\x04\x96\x02\xb2\xe1\xc6\xd9\x9c\x90\x6b\x4c\xd6\x6a\xbb\x06\xe9\x8c\x11\xb6\x0e\xd0\x38\x84\xd7\x1d\x6d\xc4\x5a\x81\x44\x25\xa2\x76\x16\x1a\x74\x06\x94\xf1\x71\x0f\x69\x95\x6c\x4c\x44\x6e\x8c\xab\xe1\xe3\xee\xed\x59\x8f\xca\x0b\x54\x7c\x78\x05\xb9\x79\x1f\x11\xe1\x23\xc8\x56\x09\x4b\xd0\x00\xc5\x06\x58\x34\x9e\x7d\x80\xbf\xec\xa6\x0f\x15\xdf\xe8\x10\x1d\xee\x7b\xca\x54\x94\x0c\x55\x70\x6d\x77\x23\x9d\x6d\x86\xd9\x7b\x62\x7b\x76\xa6\xe6\xdc\xf4\xd1\x30\x2a\xe3\xba\x4b\x8d\xe9\xf5\xf7\x0f\x19\x81\xe7\x67\x38\xf4\xb4\x6d\x0e\xb9\x19\x17\xfa\xa8\x8c\xf5\x18\x8e\x37\xfd\xb1\xc6\x64\x89\xda\xe9\x08\x9f\xfe\x05\x00\x00\xff\xff\x75\x9b\x53\xa7\x31\x03\x00\x00")

func kioskImageChroot_commandsBytes() ([]byte, error) {
	return bindataRead(
		_kioskImageChroot_commands,
		"kiosk-image/chroot_commands",
	)
}

func kioskImageChroot_commands() (*asset, error) {
	bytes, err := kioskImageChroot_commandsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-image/chroot_commands", size: 817, mode: os.FileMode(509), modTime: time.Unix(1624284067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskImageCreate_custom_image = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x6d\x6f\x22\x37\x10\xfe\xce\xaf\x98\xc2\x2a\xb9\x53\xe5\xdd\x24\xcd\xb5\x55\x25\x4e\xa2\x80\x5a\x7a\x97\x0b\x0a\x77\xd7\x2f\x27\x21\x63\xcf\x82\x85\xd7\xde\xf3\x0b\x81\x90\xfc\xf7\xca\xde\x25\xbc\x04\xa5\x69\xf3\x05\xe1\x99\x67\x1e\x8f\xc7\xb3\xcf\xb8\xf5\x43\x36\x11\x2a\xb3\xb3\x46\x6b\xc4\x8c\x28\x1d\x08\x0b\x05\xe5\x08\xb9\xd1\x05\x70\xcd\x7c\x81\xca\x51\x27\xb4\x82\x99\x73\xa5\xfd\x2d\xcb\x66\x28\xcb\xd4\x4f\xbc\x72\x3e\x65\xba\xc8\x98\x2e\x0a\xaf\x84\x5b\x65\x1f\xc5\x02\xbb\xbd\xae\xb7\x4e\x17\xe2\x2e\x46\x35\x5a\x4e\x73\x0d\x77\xf4\x8e\x42\xae\x0d\x48\xcd\xa8\x04\x8b\x0e\x58\x84\xc1\xa8\x7f\xf3\xb5\x7f\x33\x1e\x0c\xc7\x9d\x5e\xef\xa6\x3f\x1a\x35\x90\xcd\x34\x34\x99\x41\xea\x70\x83\x12\x05\x9d\x62\x13\x4e\x4e\xe0\x5b\xc3\x7a\xae\x81\x86\x5c\x95\x75\x54\x4a\x20\x2b\x60\xde\xc8\xca\xfb\x84\xaf\xdd\x4c\xde\x44\xf7\x26\x7f\x5a\x8a\x54\x94\x22\x5f\xa5\xda\x4c\x33\xb8\x78\x9f\x71\x5c\x64\xca\x4b\xf9\xb6\xde\xe1\xf7\xce\xa8\x3f\x1e\x5c\x75\xfe\xe8\x8f\x3f\x75\xae\xfa\xed\xe4\x1c\x4e\x4e\xbe\x35\x3e\x0c\xae\x47\x1f\x6a\xfb\xa0\xd7\x6e\x26\xeb\x8b\x87\x66\xf4\x7c\xbc\xee\x76\x3e\x8e\xaf\x3a\xdd\x3f\x07\x9f\xfa\xc1\xf1\x53\xed\xa8\x42\x3a\xc3\x61\x45\xd4\x4c\xd6\x97\xb5\xa7\xfb\x65\xf4\xf9\xfa\x6a\x3c\xea\xde\x0c\x86\x9f\x47\xe3\xcf\xd7\xe3\x9b\x2f\x9f\x02\xe0\x5d\x0d\xd8\xd9\xff\x83\xd0\x76\x1e\x8d\xc7\xce\x6e\xbf\x7b\x6a\x67\xb9\x25\x4e\x6b\x69\x61\x8a\x4a\x58\x1d\x0b\x16\x43\x8a\x39\x17\x06\x26\x5e\x48\x1e\xd7\x8c\xef\x2c\x2a\x27\x29\xa1\x50\x6e\xdf\x80\x4b\x67\x28\x73\x84\x55\x40\xcb\x4a\x48\xd3\x2c\xd2\xda\x2c\x59\x1f\x94\xe8\x01\xd2\x6d\x7e\x85\xf6\xca\x01\xd1\x20\xb5\x2e\xe1\x08\x76\xb3\x59\x44\x1b\xbb\x52\x0c\x08\xc1\x25\x93\x9e\x63\x3b\x63\xd4\x96\x68\xb2\x5c\x48\xb4\x2b\xeb\xb0\x48\x37\x27\x04\x42\x43\x6c\xf6\x24\xb9\xc0\xe3\xd5\x23\x2c\x60\x9e\x61\xd9\x26\xba\xd8\x16\xcf\x68\xed\x00\xb9\xd8\xc9\x8c\x95\x90\xa1\x63\x99\x41\xab\xe5\x22\x65\x5a\xe5\x11\x11\x8d\x47\x8e\x3b\x11\x8a\x43\x66\xbc\xca\x2a\x98\xf1\xea\x09\x8a\x54\xa0\xd0\x71\x15\x88\xe3\x62\x07\x14\xab\x1f\xed\xb7\xda\xcc\x6d\x49\x19\x3e\xef\xcd\xe6\xa1\x37\x48\x58\xa3\xd9\xbd\xa9\xd2\x60\x49\x0d\x8e\xa3\xff\x28\x65\x85\x63\xb3\x70\xf2\x71\xf8\x88\xa9\xe2\xf6\x19\x64\x9a\xee\x6d\x16\xbf\x7b\xad\xd2\x72\xf5\xd2\x94\x0e\x09\xa8\x14\x0b\x7c\x45\x7c\xb8\x10\x31\xb5\xaf\x63\x70\x46\x4b\x89\xe6\x15\x24\xa2\x1c\x97\x46\x2f\x04\x7f\x15\x4b\x41\xc5\xcb\x6a\x19\x3b\x73\x56\x68\x0e\x3f\xde\xee\x7c\x08\x47\x1a\xbe\xa0\x4a\xe4\x68\x77\x3b\x7a\xb6\x6d\xf3\x9d\x4d\x0e\x7b\x20\x59\x3f\x51\xd1\x07\x48\xd6\xfb\xfa\x17\x2c\x7b\xba\xb7\x85\x6c\xf4\xee\x01\x9a\xc9\xfa\xa8\xd0\xd5\x1a\x17\xa5\x7e\x68\x34\xf7\x4c\xa8\x29\xb8\x19\x42\xb7\x07\x5b\xed\x6a\xb4\x62\xda\xd6\xc7\x55\xeb\xc9\x19\x78\x39\x9f\x92\xef\x1e\xcd\x0a\xc8\xdf\x40\x88\x9d\xe9\xdb\x5c\x9b\x82\xba\xf6\x69\xb2\x1e\x52\x36\xa7\x53\x0c\x79\x7d\x45\x63\x85\x56\x0f\xdf\xd4\x29\xbc\xff\x0f\x55\x6b\xe1\xf2\x40\x11\x5e\x16\xfb\x22\x14\xe1\x68\xe7\x4e\x97\x5b\x7e\x8b\x1c\x88\x80\xd3\xcc\x4f\xc4\x77\x1f\x46\x2a\x3f\x7d\x35\x57\x1d\xf4\xbf\x98\xe2\x05\x75\x75\x51\x1a\xb4\xa1\x80\xbb\x62\xf4\xa8\xa7\xf1\x2a\x9e\xe5\xde\x0a\xf8\x04\xce\xcf\x2e\x7f\x7d\xf7\xcb\xcf\x91\xa9\x34\x42\xb9\x1c\x92\x37\xdc\x03\xb1\xcb\x20\x8f\x52\xb3\x39\xb1\xe2\x0e\xdb\xe7\x15\xf1\x3d\x30\xef\x80\xe4\xe7\x6f\xff\xed\xe6\x42\xd4\x36\x6b\x2d\x39\x14\xfc\x9d\xf5\x45\xea\x96\x0e\xa8\xe2\xc0\xa8\x64\x5e\x86\x67\x85\xc2\xdb\xe0\x04\xeb\x0b\xbb\x99\x8a\xc7\x86\x8a\x29\x76\x39\x82\x39\x0f\xfa\x4d\xdc\xaa\x44\xc8\x81\xc4\x03\x9c\xc1\x3d\x44\xf4\x92\x9a\xa9\x05\x72\x56\xc7\xc0\x3d\x4c\x0d\x96\x40\x16\x20\xac\x96\x42\xf9\x65\x36\xd1\xda\xa5\x8c\xba\x4d\x88\x43\x3c\xdc\x21\x66\x1f\x3e\x85\xc1\xe8\x7a\xe7\x5b\xa8\xab\x2e\xac\x0e\x75\xec\x01\x31\x40\xbe\x42\x33\xd9\x0e\xd6\x26\x10\x46\xd9\x0c\x89\x50\x9a\xa3\x05\xf2\x17\x10\x19\x4a\xfe\xb8\xfb\xe6\x4f\x3a\x11\x0a\x08\x3b\x92\x16\x51\x9a\x60\xe1\x25\x09\x16\x88\xbf\x44\x6a\xca\xe3\x95\xc0\x65\x6d\x11\x2a\xd7\xc4\xd1\x89\xc4\x30\xf7\xd2\x34\xab\x9e\x83\xe4\xe2\x2c\x3d\xbb\x4c\x2f\x88\x45\xb3\x40\x43\xaa\xc7\x5b\x2a\xac\xae\x9f\x07\x8c\x43\x9a\x36\x7c\x35\x0b\x37\xaf\x00\x53\x84\xb3\xec\xad\xf2\xed\x24\xde\xac\xf7\x2f\xa7\xb6\xee\xcf\xa9\xda\x98\x1c\xbc\x37\xfe\x09\x00\x00\xff\xff\xfb\xf8\xe4\x1a\xe5\x0a\x00\x00")

func kioskImageCreate_custom_imageBytes() ([]byte, error) {
	return bindataRead(
		_kioskImageCreate_custom_image,
		"kiosk-image/create_custom_image",
	)
}

func kioskImageCreate_custom_image() (*asset, error) {
	bytes, err := kioskImageCreate_custom_imageBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-image/create_custom_image", size: 2789, mode: os.FileMode(509), modTime: time.Unix(1624456132, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskImageDownload_ubuntu_image = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\xbd\xca\x83\x30\x18\x46\x77\xaf\x22\x9f\x9f\x6b\x12\x11\xe9\x50\xb0\xa0\x10\x8a\x83\x16\x6a\xed\x2a\x6a\x53\x14\xd4\xc8\x9b\x37\x52\x28\xde\x7b\xe9\x8f\x9b\xae\xcf\xe1\xe1\x9c\xff\x3f\x5e\xb5\x03\xaf\x4a\xdd\x58\x51\x98\x89\x22\x8f\xf2\xf4\x92\x17\x71\x12\x1e\x45\x91\x86\x89\x08\x4c\x65\x06\x34\xd4\x73\x99\xeb\x33\x8f\x76\xed\x24\xa9\x96\x30\x49\xa0\x65\x7f\xdb\xf9\xac\xd5\x6a\xe5\x7b\x15\xe7\x2c\x3e\xa5\xc1\xef\x67\x41\x4f\x28\xdc\x89\xb3\x6e\x59\xb0\x32\x38\x1a\x64\xf8\xc0\x65\x91\x00\x0a\x3e\x43\x6d\xa0\x23\x76\x83\x38\xea\x3d\xe7\x20\x3b\x59\x6a\xa9\xd9\xb7\x8f\xd5\xaa\xe7\xce\x73\xb3\x63\x5e\x85\x6f\xf5\x6c\x93\x03\xb1\xb7\xe9\x2b\x00\x00\xff\xff\x34\xc0\x38\x19\x23\x01\x00\x00")

func kioskImageDownload_ubuntu_imageBytes() ([]byte, error) {
	return bindataRead(
		_kioskImageDownload_ubuntu_image,
		"kiosk-image/download_ubuntu_image",
	)
}

func kioskImageDownload_ubuntu_image() (*asset, error) {
	bytes, err := kioskImageDownload_ubuntu_imageBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-image/download_ubuntu_image", size: 291, mode: os.FileMode(509), modTime: time.Unix(1624453023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kioskImagePrepare_kiosk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x5d\x73\xe2\x36\x14\x7d\xf7\xaf\x50\x29\xcb\x26\x0f\x8a\x61\xd2\x6e\x3a\x3b\x6b\xa6\x2e\x78\xb3\x9e\x40\x60\x30\xe9\x6e\x67\xc9\x30\x8a\x75\x03\x9a\xc8\x92\x2b\xc9\x10\xf2\xf1\xdf\x3b\xb6\x71\x31\x04\xb3\xe9\x76\x66\x5f\x12\x74\xef\xb9\x9f\x3a\x3a\xfe\xf9\x27\xfb\x86\x09\xfb\x86\xe8\xb9\xa5\x13\x2a\x11\x89\x0d\x4a\x62\x4a\x0c\xa0\x46\x03\x4d\x36\x46\x26\xb4\x21\x9c\x23\xbc\x42\x9c\xdd\xc0\x8c\xb7\x70\x04\x9a\x14\x87\x6a\xf4\xfd\x92\xac\x38\x11\xf4\x00\x82\x4a\x23\x25\xaf\x06\x44\x4c\xcc\xc0\x98\x55\x35\x42\x87\x4a\x9a\x03\x6e\x38\x50\xfe\x96\x29\x58\x12\xce\x0f\x40\xe2\x95\x99\x4b\x71\x8a\x63\x16\x97\x40\xe9\xa9\x00\x29\xf8\x3b\x01\x6d\x74\x85\xfb\x23\x27\xfa\xae\xc2\xa7\xc3\x39\xd0\x84\x97\x17\x1e\xdd\x51\xa6\x90\x0d\x26\xb4\xf5\x4a\x1b\x88\xe8\xfa\xbf\x9d\xed\xe1\x77\x63\x56\xad\x13\x0d\x6a\xc1\x42\x38\x29\xf7\x9d\x68\x50\x84\x52\x84\x23\x84\xcf\x51\x66\xc2\x58\xcf\x81\x73\xf4\xef\x45\xa3\x3b\x26\xb7\x9b\x21\x5a\x2f\x69\x6e\xfe\xf0\xc1\x1b\x7c\xb4\x1e\x5a\xa7\x0f\xf6\x45\x7a\x2e\xff\x4c\x3d\x59\x00\x84\x73\x89\x30\x08\x54\x9b\x88\x89\xc8\xd3\xb9\xbd\x9e\x73\xe4\xf6\x7a\xc7\xe8\x72\x30\x74\x83\xe0\x73\xf7\x7d\x6a\xab\xb5\xdb\xf9\x18\x09\x95\xa0\xca\xeb\x09\x89\x41\xed\xd7\x8e\x68\xcb\x05\x28\xc5\x28\x9c\x84\x52\xdc\xa2\xbc\xcb\xaf\x41\xee\xbe\xb6\xbc\x7b\x08\x03\x43\x94\x71\x4a\x3f\xb1\xad\xd3\x91\x49\x4e\x1d\x8c\x85\x64\x5a\x27\x80\x30\x26\x89\x91\x5c\xce\x98\x58\xaf\xe2\x8d\x8f\x26\xf5\xb1\x37\xea\x5b\xe3\x55\x0c\x0e\xa3\x1c\x36\xc3\x56\xf6\x99\xc5\x16\x2d\xae\x3b\xba\x12\xcc\x5c\x5b\x5d\xd0\xa1\x62\xb1\x61\x52\x38\x7d\x99\x08\x83\x12\xc1\x0c\xca\xb7\xe8\xde\x1a\x50\x8e\x16\x24\xa6\x45\xb0\xb5\x77\x14\x3b\xd1\xca\xe6\x32\x24\x3c\xbb\xba\x75\xb9\xb9\xe5\x89\x05\x53\x52\x44\x20\x8c\x73\xe1\x0f\x82\x8b\xa9\x3b\x1c\x4e\x2f\xdd\xbe\xe7\xb8\xc3\x61\xcf\xef\xb8\x63\x7f\x70\x99\x19\xa6\xc3\x9e\xdb\xf1\x3e\x0d\x7a\x5d\x6f\x64\x5d\x69\x50\x4e\x96\xc5\x1a\x81\xce\x4a\x10\xbe\x24\x2b\x5d\x1c\x03\x08\x9d\x53\xcb\xfa\xea\xe7\xc4\xbc\xb6\x3e\x13\x61\x80\xfe\xb1\x72\x28\xdc\x92\x84\x9b\x13\x43\xd4\x0c\xcc\x66\x37\xe9\xbb\xc2\x0c\xd5\xf4\xd3\xa1\xca\x4f\xf5\xc7\xed\x3e\x9f\x9f\x66\xb5\xbd\xec\xde\x5a\x69\x99\x2b\xf3\x48\x52\xf4\xee\xdd\x2f\xff\x29\x6a\x4d\x53\xf4\xb6\xa4\x72\x13\xf1\xb6\x56\x7f\xec\x5c\x05\xe3\x41\x7f\x1a\x74\x46\xfe\x70\x1c\x4c\xc7\x83\xe9\xe8\xea\xf2\xb9\x86\xda\xa8\x62\xe9\xbb\xbc\x6d\x57\xe0\x72\x1a\x64\xb8\x42\x56\x70\x18\x51\x84\x71\x0c\x2a\x22\x02\x84\x49\xf9\x47\x29\x8e\xa5\x32\xe8\xd7\x66\xb3\x69\x9b\xb0\x10\x15\x30\xe9\xc3\x6d\x34\x10\xdc\x67\xee\x2f\xdd\xf3\xb4\xb1\xb1\xdf\xf7\xa6\x5d\x7f\xe4\xd8\x2a\x11\x76\xfa\xc4\xed\x56\xb3\xd9\x4c\x81\x9a\x03\xc4\xa8\x75\x9a\x27\x38\xca\x2f\x45\x90\x18\xcd\xc0\xa0\x88\x29\xbc\x7e\xeb\x6d\x9b\xc2\xc2\x16\x09\xe7\xe8\xe9\x09\x6d\x60\x85\x06\x6d\xa0\x18\x53\x58\x44\x92\xc2\xf1\x3a\xa7\x9d\x02\xb3\x21\xf7\xe7\x6b\x1c\x6f\x1a\xf9\xad\xd4\x7c\xd7\x0f\x86\x3d\xf7\x2f\xe7\xfd\xfa\xdb\x70\xf4\xa5\xf8\x10\xe0\xa5\x42\x93\xfa\xda\x5f\x9d\xcb\xca\xee\xaf\x96\x51\x93\x89\x19\x9a\xbc\xa0\x51\xcd\x3a\x2a\x2f\xa0\xf8\x8e\x2c\x99\xa0\x72\xa9\xd9\x03\xa0\x49\xfd\xa8\xb0\x6a\x20\x2a\x9c\x23\x8c\xa5\xe0\xab\x05\xd3\xec\x86\xa7\x5a\x20\x48\x04\x7b\x52\x1f\xa3\x56\xb3\xf9\x26\xfb\x73\x8c\x1a\xd6\x4b\x40\x49\x20\x32\x72\x9e\x9d\x9d\xbd\x82\x3c\x39\x63\x43\xc3\x11\x08\x92\x36\x50\xc9\xf8\x83\xaa\x33\x5d\x4a\x75\x07\xea\xc7\x88\x4f\x56\x11\xe7\x15\xed\x88\x30\x71\x12\xaf\xf6\x88\x50\xe0\x8d\xfe\xf4\x46\x5b\x87\x2d\xf9\x79\x19\xe1\xf7\xdd\x73\x6f\xea\x77\x77\x8e\x95\x51\xbd\x41\xc7\xed\x4d\xfb\x6e\xe7\x93\x7f\xe9\x6d\x9f\x5e\x0a\x9d\x92\xd2\x1c\xd0\xb9\x56\xf3\xfb\x84\xce\xae\x9a\xcf\xae\x3f\xae\x8d\xfe\x70\xea\x76\xbb\x23\x2f\x08\x9e\xed\x43\x3a\xb7\x73\x89\x65\x96\xec\x54\xdb\xb7\x19\xbb\x60\x64\xe1\xfc\xff\xc5\x2a\x37\x6a\xd7\x1f\xb7\x7c\xdf\x5b\xea\x15\x32\xfe\xad\xe0\x9d\x67\xb6\x8f\x9b\xdf\x7c\x6e\x3b\x35\x2c\xeb\x9f\x00\x00\x00\xff\xff\xe9\x78\xc9\x8b\x06\x0b\x00\x00")

func kioskImagePrepare_kioskBytes() ([]byte, error) {
	return bindataRead(
		_kioskImagePrepare_kiosk,
		"kiosk-image/prepare_kiosk",
	)
}

func kioskImagePrepare_kiosk() (*asset, error) {
	bytes, err := kioskImagePrepare_kioskBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiosk-image/prepare_kiosk", size: 2822, mode: os.FileMode(509), modTime: time.Unix(1624474603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kiosk-image/Makefile":              kioskImageMakefile,
	"kiosk-image/chroot_commands":       kioskImageChroot_commands,
	"kiosk-image/create_custom_image":   kioskImageCreate_custom_image,
	"kiosk-image/download_ubuntu_image": kioskImageDownload_ubuntu_image,
	"kiosk-image/prepare_kiosk":         kioskImagePrepare_kiosk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"kiosk-image": &bintree{nil, map[string]*bintree{
		"Makefile":              &bintree{kioskImageMakefile, map[string]*bintree{}},
		"chroot_commands":       &bintree{kioskImageChroot_commands, map[string]*bintree{}},
		"create_custom_image":   &bintree{kioskImageCreate_custom_image, map[string]*bintree{}},
		"download_ubuntu_image": &bintree{kioskImageDownload_ubuntu_image, map[string]*bintree{}},
		"prepare_kiosk":         &bintree{kioskImagePrepare_kiosk, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
